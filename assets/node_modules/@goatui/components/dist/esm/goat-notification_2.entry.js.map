{"file":"goat-notification.goat-toast.entry.js","mappings":"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","names":[],"sources":["./src/components/content/notification/notification.scss?tag=goat-notification&encapsulation=shadow","./src/components/content/notification/notification.tsx","./src/components/content/toast/toast.scss?tag=goat-toast&encapsulation=shadow","./src/components/content/toast/toast.tsx"],"sourcesContent":["@import \"../../../globalStyles/commons\";\n\n\n:host {\n  display: block;\n  margin-bottom: v(--spacing-3);\n}\n\n.notification {\n  border-style: solid;\n  border-color: transparent;\n  display: flex;\n\n  .state-icon {\n    padding: v(--spacing-5) v(--spacing-4);\n    line-height: 0;\n  }\n\n  .content {\n    flex: 1;\n    padding: v(--spacing-4) 0;\n\n    .title {\n      @include font-style(text-md);\n      font-weight: v(--font-weight-bold);\n    }\n\n    .subtitle {\n      @include font-style(text-sm);\n    }\n  }\n\n\n  .close-button {\n    margin: 0;\n    padding: v(--spacing-3);\n  }\n}\n\n:host(:not([dismissible])) .content {\n  padding-inline-end: v(--spacing-4);\n}\n\n\n@mixin alertState($color, $dark) {\n  @if $dark {\n    .alert {\n      background-color: v(--color-#{$color});\n\n      .content {\n        .message {\n          color: white;\n          --link-color: white;\n        }\n\n        .description {\n          color: v(--text-primary);\n        }\n      }\n    }\n  } @else {\n    .alert {\n      background-color: v(--color-#{$color}-20);\n\n      .content {\n        .message {\n          color: v(--color-#{$color}-70);\n          --link-color: #{v(--color-#{$color}-70)};\n        }\n\n        .description {\n          color: v(--text-secondary);\n        }\n      }\n    }\n  }\n}\n\n@each $state in [info, success, warning, error] {\n  :host([state=\"#{$state}\"]) {\n    .notification {\n      border-left-color: v(--support-#{$state}-inverse);\n      color: v(--text-inverse);\n      background: v(--background-inverse);\n      border-width: 0 0 0 3px;\n\n      .close-button {\n        --button-color: #{v(--text-inverse)};\n      }\n      .state-icon {\n        color: v(--support-#{$state}-inverse);\n      }\n\n      &.low-contrast {\n        color: var(--color-neutral-100);\n        border-color: v(--support-#{$state});\n        background: v(--color-#{$state}-10);\n        border-width: 1px 1px 1px 3px;\n        .close-button {\n          --button-color: #{v(--color-neutral-100)};\n        }\n        .state-icon {\n          color: v(--support-#{$state});\n        }\n      }\n    }\n  }\n}\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop, State } from '@stencil/core';\r\nimport { ElementSize, isDarkMode, observeThemeChange } from '../../../utils/utils';\r\n\r\n\r\n/**\r\n * @name Notification\r\n * @description Notifications are messages that communicate information to the user.\r\n * @example <goat-notification state=\"success\" low-contrast dismissible>\r\n *               <div slot='title'>Successful saved the record</div>\r\n *             </goat-notification>\r\n */\r\n@Component({\r\n  tag: 'goat-notification',\r\n  styleUrl: 'notification.scss',\r\n  shadow: true,\r\n})\r\nexport class Notification implements ComponentInterface {\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop() state: 'success' | 'error' | 'info' | 'warning' = 'info';\r\n\r\n  @Prop() lowContrast: boolean = false;\r\n\r\n  @Prop() dismissible: boolean = false;\r\n\r\n  @Prop() actionable: boolean = true;\r\n  @Prop() actionName: string = 'dismiss';\r\n  @Prop() actionLabel: string = 'Dismiss';\r\n\r\n  @Event({ eventName: 'goat:dismiss' }) goatDismiss: EventEmitter;\r\n\r\n  @State() hidden: boolean = false;\r\n\r\n  @State() isDarkMode: boolean = isDarkMode();\r\n\r\n  componentWillLoad() {\r\n    observeThemeChange(() => {\r\n      this.isDarkMode = isDarkMode();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host state={this.state} hidden={this.hidden}>\r\n        <div class={{ 'notification': true, 'low-contrast': this.lowContrast }} role='alert'>\r\n          <div class='state-icon'>\r\n            {this.renderStateIcon()}\r\n          </div>\r\n          <div class='content'>\r\n            <div class='title'>\r\n              <slot name='title' />\r\n              <slot />\r\n            </div>\r\n            <div class='subtitle'>\r\n              <slot name='subtitle' />\r\n            </div>\r\n          </div>\r\n          {this.renderAction()}\r\n          {this.renderCloseButton()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.actionable)\r\n      return (\r\n        <div class='action'>\r\n          <slot name='action' />\r\n        </div>\r\n      );\r\n  }\r\n\r\n  renderCloseButton() {\r\n\r\n    if (this.dismissible) {\r\n      return (\r\n        <div class=\"close-button-container\">\r\n          <goat-button class={{ 'close-button': true }}\r\n                       aria-label='Close alert'\r\n                       size={ElementSize.SMALL}\r\n                       icon='x'\r\n                       variant='link'\r\n                       onGoat:click={(evt) => {\r\n                         this.hidden = true;\r\n                         this.goatDismiss.emit(evt);\r\n                       }} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderStateIcon() {\r\n    if (this.state === 'success') {\r\n      return <goat-icon class='inherit' name='check-circle-fill' size='sm' />;\r\n    } else if (this.state === 'error') {\r\n      return <goat-icon class='inherit' name='x-circle-fill' size='sm' />;\r\n    } else if (this.state === 'info') {\r\n      return <goat-icon class='inherit' name='info-circle-fill' size='sm' />;\r\n    } else if (this.state === 'warning') {\r\n      return <goat-icon class='inherit' name='exclamation-circle-fill' size='sm' />;\r\n    }\r\n  }\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n\r\n:host {\r\n  display: inline-block;\r\n  margin-bottom: v(--spacing-3);\r\n}\r\n\r\n.toast {\r\n  border-radius: v(--border-radius);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: v(--spacing-2);\r\n  padding: v(--spacing-2) v(--spacing-4);\r\n  border: 1px solid v(--ui-03);\r\n  box-shadow: v(--shadow-lg);\r\n  background-color: v(--background);\r\n\r\n  .content {\r\n    flex: 1;\r\n    color: v(--text-primary);\r\n\r\n    .message {\r\n      @include font-style(text-md);\r\n    }\r\n\r\n    .description {\r\n      @include font-style(text-sm);\r\n    }\r\n  }\r\n\r\n  .state-icon {\r\n    line-height: 0;\r\n  }\r\n}\r\n\r\n\r\n@each $state in [info, success, warning, error] {\r\n  :host([state=\"#{$state}\"]) {\r\n    .state-icon {\r\n      color: v(--color-#{$state});\r\n    }\r\n  }\r\n  :host-context([data-theme=\"dark\"]):host([state=\"#{$state}\"]) {\r\n\r\n  }\r\n}\r\n","import { Component, ComponentInterface, Element, h, Host, Prop, State } from '@stencil/core';\r\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\r\n\r\n\r\n/**\r\n * @name Toast\r\n * @description Toasts are lightweight notifications.\r\n * @example <goat-toast state=\"success\" message=\"Successful saved the record\"></goat-toast>\r\n */\r\n@Component({\r\n  tag: 'goat-toast',\r\n  styleUrl: 'toast.scss',\r\n  shadow: true,\r\n})\r\nexport class Toast implements ComponentInterface {\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop() message: string = '';\r\n\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'info' | 'warning' = 'info';\r\n\r\n  @State() isDarkMode: boolean = isDarkMode();\r\n\r\n  componentWillLoad() {\r\n    observeThemeChange(() => {\r\n      this.isDarkMode = isDarkMode();\r\n    });\r\n  }\r\n\r\n  renderStateIcon() {\r\n    if (this.state === 'success') {\r\n      return <goat-icon class='inherit' name='check-circle-fill' size='sm' />;\r\n    } else if (this.state === 'error') {\r\n      return <goat-icon class='inherit' name='x-circle-fill' size='sm' />;\r\n    } else if (this.state === 'info') {\r\n      return <goat-icon class='inherit' name='info-circle-fill' size='sm' />;\r\n    } else if (this.state === 'warning') {\r\n      return <goat-icon class='inherit' name='exclamation-circle-fill' size='sm' />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class={{ 'toast': true, 'dark-mode': this.isDarkMode }} role='alert'>\r\n          <div class='state-icon'>\r\n            {this.renderStateIcon()}\r\n          </div>\r\n          <div class='content'>\r\n            <div class='message'>\r\n              {this.message}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}