{"version":3,"sources":["src/3d-party/monaco/index.tsx","src/components/form/code-editor/code-editor.scss?tag=goat-code-editor&encapsulation=shadow","src/components/form/code-editor/code-editor.tsx"],"names":["async","loadMonaco","version","window","paths","vs","loadScript","codeEditorCss","CodeEditor","this","gid","getComponentIndex","[object Object]","p4Change","debounceEvent","debounce","newValue","editorMonacoInstance","updateOptions","readOnly","readonly","disabled","editor","setModelLanguage","getModel","setTheme","getValue","value","setValue","focus","blur","debounceChanged","setTimeout","initializeMonaco","monaco","editorElement","innerHTML","create","lineNumbers","language","theme","onDidChangeModelContent","emit","onDidFocusEditorText","hasFocus","onDidBlurEditorText","h","Host","class","component","code-editor-component","has-focus","ref","el"],"mappings":"2GAEeA,eAAeC,IAC5B,MAAMC,EAAU,SAEhBC,OAAO,WAAa,CAAEC,MAAO,CAAEC,GAAM,wDAAwDH,mBACvFI,EAAW,wDAAwDJ,4BACnEI,EAAW,wDAAwDJ,4CACnEI,EAAW,wDAAwDJ,kCCR3E,MAAMK,EAAgB,kgrECcTC,EAAU,qEAErBC,KAAAC,IAAcC,cAMS,cAAcF,KAAKC,yCAUG,oBAMF,oBAEC,iBAEJ,yBAEW,8BAEf,mBAUjB,kBAEC,0CAIVE,kBACRH,KAAKI,SAAWC,EAAcL,KAAKI,SAAUJ,KAAKM,UAIpDH,gBAAgBI,GACdP,KAAKQ,qBAAqBC,cAAc,CAAEC,SAAUH,GAAYP,KAAKW,WAIvER,gBAAgBI,GACdP,KAAKQ,qBAAqBC,cAAc,CAAEC,SAAUH,GAAYP,KAAKY,WAIvET,gBAAgBI,GACdb,OAAO,UAAUmB,OAAOC,iBAAiBd,KAAKQ,qBAAqBO,WAAYR,GAIjFJ,aAAaI,GACXb,OAAO,UAAUmB,OAAOG,SAAST,GAInCJ,aAAaI,GACX,GAAIP,KAAKQ,qBAAqBS,aAAejB,KAAKkB,MAAO,CACvDlB,KAAKQ,qBAAqBW,SAASZ,IAKvCJ,uBACE,OAAOH,KAAKC,IAQdE,iBACE,GAAIH,KAAKQ,qBAAsB,CAC7BR,KAAKQ,qBAAqBY,SAS9BjB,gBACE,GAAIH,KAAKQ,qBAAsB,CAC7BR,KAAKQ,qBAAqBa,QAO9BlB,0BACEH,KAAKsB,kBACL,IAAK5B,OAAO,UAAW,OACfF,KAIVW,mBACEoB,YAAW,IAAMvB,KAAKwB,oBAAoB,KAGpCrB,mBACN,MAAMsB,EAAS/B,OAAO,UAItBM,KAAK0B,cAAcC,UAAY,GAE/B3B,KAAKQ,qBAAuBiB,EAAOZ,OAAOe,OAAO5B,KAAK0B,cAAe,CACnER,MAAOlB,KAAKkB,MACZW,YAAa7B,KAAK6B,YAClBC,SAAU9B,KAAK8B,SACfC,MAAO/B,KAAK+B,MACZrB,SAAUV,KAAKY,UAAYZ,KAAKW,WAIlCX,KAAKQ,qBAAqBwB,yBAAwB,KAChDhC,KAAKkB,MAAQlB,KAAKQ,qBAAqBS,WACvCjB,KAAKI,SAAS6B,KAAK,CAAEf,MAAOlB,KAAKkB,WAGnClB,KAAKQ,qBAAqB0B,sBAAqB,KAC7ClC,KAAKmC,SAAW,QAGlBnC,KAAKQ,qBAAqB4B,qBAAoB,KAC5CpC,KAAKmC,SAAW,SAIpBhC,SACE,OACEkC,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,MAAO,CACVC,UAAa,KACbC,wBAAyB,KACzBtC,CAACH,KAAK+B,OAAQ,KACdnB,SAAYZ,KAAKY,SACjBD,SAAYX,KAAKW,SACjB+B,YAAa1C,KAAKmC,WAElBE,EAAA,MAAA,CAAKE,MAAM,SAASI,IAAKC,GAAM5C,KAAK0B,cAAgBkB,KAClD5C,KAAKQ,sBAAwB6B,EAAA,MAAA,CAAKE,MAAM,sBACxCF,EAAA,eAAA,CAAcE,MAAM,YAAY","sourcesContent":["import { loadScript } from '../../utils/utils';\r\n\r\nexport default async function loadMonaco() {\r\n  const version = '0.21.2';\r\n  // @ts-ignore\r\n  window['require'] = { paths: { 'vs': `https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs` } };\r\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/loader.js`);\r\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/editor/editor.main.nls.js`);\r\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/editor/editor.main.js`);\r\n}\r\n","@import \"../../../3d-party/monaco/editor.main\";\r\n@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.code-editor-loader {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: v(--spacing-2);\r\n}\r\n\r\n.code-editor-component {\r\n  height: 100%;\r\n  position: relative;\r\n\r\n  .editor {\r\n    height: 100%;\r\n    min-height: 2rem;\r\n    border: 1px solid v(--border-color);\r\n    border-radius: v(--border-radius);\r\n    overflow: hidden;\r\n\r\n    &[readonly], &[readonly=\"true\"] {\r\n      color: v(--color-neutral);\r\n      background-color: v(--color-neutral-10);\r\n      border-color: v(--color-neutral);\r\n      cursor: default;\r\n    }\r\n    &[disabled], &[disabled=\"true\"] {\r\n      color: v(--color-neutral);\r\n      background-color: v(--color-neutral-10);\r\n      border-color: v(--color-neutral);\r\n      cursor: not-allowed;\r\n    }\r\n  }\r\n\r\n  &.disabled {\r\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .view-lines {\r\n      cursor: default;\r\n    }\r\n  }\r\n\r\n  &.disabled.vs-light {\r\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .monaco-editor .margin {\r\n      background: v(--color-neutral-200);\r\n    }\r\n  }\r\n\r\n  &.disabled.vs-dark {\r\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .monaco-editor .margin {\r\n      background: v(--color-neutral-800);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * States\r\n */\r\n.code-editor-component.has-focus .editor {\r\n  @include focus-ring;\r\n  border-color: transparent;\r\n}\r\n\r\n@each $state in [success, warning, error] {\r\n  :host-context(.input-state-#{$state}) {\r\n    .code-editor-component {\r\n      .editor {\r\n        border-color: v(--support-#{$state});\r\n      }\r\n\r\n      &.has-focus {\r\n        .editor {\r\n          @include focus-ring(v(--support-#{$state}));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, ComponentInterface, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\r\nimport loadMonaco from '../../../3d-party/monaco';\r\n\r\n/**\r\n * @name Code Editor\r\n * @description A browser based code editor.\r\n * @img /assets/img/code-editor.png\r\n */\r\n@Component({\r\n  tag: 'goat-code-editor',\r\n  styleUrl: 'code-editor.scss',\r\n  shadow: true,\r\n})\r\nexport class CodeEditor implements ComponentInterface, InputComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean = false;\r\n\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({reflect: true}) disabled: boolean = false;\r\n\r\n  @Prop({reflect: true}) readonly : boolean = false;\r\n\r\n  @Prop() theme: 'vs-light' | 'vs-dark' = 'vs-light';\r\n\r\n  @Prop() language: 'javascript' | 'json' | 'html' = 'javascript';\r\n\r\n  @Prop() lineNumbers: 'off' | 'on' = 'on';\r\n\r\n  /**\r\n   * Emitted when the value has changed..\r\n   */\r\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 250;\r\n\r\n  @State() hasFocus = false;\r\n\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\r\n  }\r\n\r\n  @Watch('disabled')\r\n  disabledWatcher(newValue: string) {\r\n    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.readonly});\r\n  }\r\n\r\n  @Watch('readonly')\r\n  readonlyWatcher(newValue: string) {\r\n    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.disabled});\r\n  }\r\n\r\n  @Watch('language')\r\n  languageWatcher(newValue: string) {\r\n    window['monaco'].editor.setModelLanguage(this.editorMonacoInstance.getModel(), newValue);\r\n  }\r\n\r\n  @Watch('theme')\r\n  themeWatcher(newValue: string) {\r\n    window['monaco'].editor.setTheme(newValue);\r\n  }\r\n\r\n  @Watch('value')\r\n  valueWatcher(newValue: string) {\r\n    if (this.editorMonacoInstance.getValue() !== this.value) {\r\n      this.editorMonacoInstance.setValue(newValue);\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.editorMonacoInstance) {\r\n      this.editorMonacoInstance.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.editorMonacoInstance) {\r\n      this.editorMonacoInstance.blur();\r\n    }\r\n  }\r\n\r\n  private editorElement?: HTMLElement;\r\n  @State() editorMonacoInstance: any;\r\n\r\n  async componentWillLoad() {\r\n    this.debounceChanged();\r\n    if (!window['monaco']) {\r\n      await loadMonaco();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    setTimeout(() => this.initializeMonaco(), 1000);\r\n  }\r\n\r\n  private initializeMonaco() {\r\n    const monaco = window['monaco'];\r\n\r\n    //monaco.languages.typescript.javascriptDefaults.addExtraLib(this.extraLibs);\r\n\r\n    this.editorElement.innerHTML = '';\r\n\r\n    this.editorMonacoInstance = monaco.editor.create(this.editorElement, {\r\n      value: this.value,\r\n      lineNumbers: this.lineNumbers,\r\n      language: this.language,\r\n      theme: this.theme,\r\n      readOnly: this.disabled || this.readonly,\r\n    });\r\n\r\n\r\n    this.editorMonacoInstance.onDidChangeModelContent(() => {\r\n      this.value = this.editorMonacoInstance.getValue();\r\n      this.p4Change.emit({ value: this.value });\r\n    });\r\n\r\n    this.editorMonacoInstance.onDidFocusEditorText(() => {\r\n      this.hasFocus = true;\r\n    });\r\n\r\n    this.editorMonacoInstance.onDidBlurEditorText(() => {\r\n      this.hasFocus = false;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class={{\r\n          'component': true,\r\n          'code-editor-component': true,\r\n          [this.theme]: true,\r\n          'disabled': this.disabled,\r\n          'readonly': this.readonly,\r\n          'has-focus': this.hasFocus,\r\n        }}>\r\n          <div class='editor' ref={el => this.editorElement = el} />\r\n          {!this.editorMonacoInstance && <div class='code-editor-loader'>\r\n            <goat-spinner class='rainbow' />\r\n            Loading editor...\r\n          </div>}\r\n        </div>\r\n\r\n\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}