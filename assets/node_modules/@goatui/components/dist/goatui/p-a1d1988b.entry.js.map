{"version":3,"sources":["src/components/form/input/input.scss?tag=goat-input&encapsulation=shadow","src/components/form/input/input.tsx"],"names":["inputCss","Input","this","gid","getComponentIndex","inputHandler","ev","input","target","oldValue","value","goatInput","emit","goatChange","keyDownHandler","key","clearable","clearInput","blurHandler","hasFocus","goatBlur","focusHandler","goatFocus","evt","nativeInput","[object Object]","focus","blur","type","JSON","parse","debounceEvent","debounce","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","startSlotHasContent","querySelector","endSlotHasContent","debounceChanged","toString","getValue","length","h","Host","has-focus","has-value","hasValue","class","input-container","disabled","start-slot-has-content","end-slot-has-content","Object","assign","ref","placeholder","autocomplete","readonly","required","onKeyDown","onInput","onBlur","onFocus","size","onClick","role"],"mappings":"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","sourcesContent":["@import \"../common-input\";\n\n\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n\n/**\n * @name Input\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\n */\n@Component({\n  tag: 'goat-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: string | number | null = '';\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n  /**\n   * The type of control to display.\n   * Possible values are: `\"text\"`, `\"password\"`, `\"number\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\n   */\n  @Prop() type: ('text' | 'password' | 'number' | 'email' | 'tel') = 'text';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: 'on' | 'off' = 'off';\n\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLInputElement;\n  private tabindex?: string | number;\n\n  @State() startSlotHasContent = false;\n  @State() endSlotHasContent = false;\n  @State() hasFocus = false;\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.goatInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.goatChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.goatBlur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.goatFocus.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n      this.hasFocus = false;\n    }\n  }\n\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    let value = this.value;\n    if (this.type === 'number') {\n      if (value)\n        this.value = JSON.parse(value + '');\n    }\n  }\n\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\n  }\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // goat-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n\n  render() {\n\n    return (\n      <Host has-focus={this.hasFocus}\n            has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'disabled': this.disabled,\n          'has-focus': this.hasFocus,\n          'start-slot-has-content': this.startSlotHasContent,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n\n          <div class='slot-container start'>\n            <slot name='start' />\n          </div>\n\n          <input\n            class='input input-native'\n            name={this.name}\n            ref={input => this.nativeInput = input}\n            type={this.type}\n            placeholder={this.placeholder}\n            autocomplete={this.autocomplete}\n            value={this.value}\n            tabindex={this.tabindex}\n            readonly={this.readonly}\n            required={this.required}\n            onKeyDown={this.keyDownHandler}\n            onInput={this.inputHandler}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            disabled={this.disabled}\n            {...this.configAria} />\n\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' size={this.size} onClick={this.clearInput} role=\"button\" />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n\n\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}