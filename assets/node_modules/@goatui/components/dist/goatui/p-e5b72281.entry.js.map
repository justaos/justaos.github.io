{"version":3,"sources":["src/components/menu/menu/menu.scss?tag=goat-menu&encapsulation=shadow","src/components/menu/menu/menu.tsx","src/components/menu/menu-item/menu-item.scss?tag=goat-menu-item&encapsulation=shadow","src/components/menu/menu-item/menu-item.tsx","src/components/content/tag/tag.scss?tag=goat-tag&encapsulation=shadow","src/components/content/tag/tag.tsx","src/components/content/text/text.scss?tag=goat-text&encapsulation=shadow","src/components/content/text/text.tsx"],"names":["menuCss","Menu","[object Object]","hostRef","this","showLoader","empty","emptyState","headline","description","internalEmptyState","JSON","parse","evt","path","composedPath","menuItem","elm","tagName","key","preventDefault","focusNextItem","focusPreviousItem","firstMenuItem","getFirstItem","setFocus","querySelector","currentItem","nextItem","nextElementSibling","disabled","previousItem","previousElementSibling","parseEmptyState","h","class","renderEmptyState","Object","assign","menuItemCss","GoatMenu","gid","getComponentIndex","tabindex","selected","startSlotHasContent","endSlotHasContent","hasFocus","isActive","clickHandler","event","goatMenuItemClick","emit","value","innerText","stopPropagation","blurHandler","focusHandler","mouseDownHandler","keyDownHandler","render","Host","active","has-focus","ref","el","nativeInput","menu-item","start-slot-has-content","end-slot-has-content","onBlur","onFocus","onClick","onMouseDown","onKeyDown","aria-disabled","name","focus","blur","hasAttribute","getAttribute","undefined","removeAttribute","tagCss","Tag","size","filter","dismissClickHandler","goatTagDismissClick","textContent","tag","renderCloseButton","textCss","Text","type","shade","level","renderHeading","renderParagraph","renderText","HeadingTag","paragraph","text"],"mappings":"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","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  --list-border-radius: #{v(--border-radius)};\r\n  --list-max-height: inherit;\r\n}\r\n\r\n\r\n.menu {\r\n  background-color: v(--field-02);\r\n  padding: v(--spacing-2) 0;\r\n  border: 1px solid v(--color-neutral-200);\r\n  box-sizing: border-box;\r\n  border-radius: var(--list-border-radius);\r\n  box-shadow: v(--shadow-sm);\r\n}\r\n","import { Component, ComponentInterface, Element, h, Listen, Method, Prop, State, Watch } from '@stencil/core';\r\n\r\n/**\r\n * @name Menu\r\n * @description Menus display a list of choices on temporary surfaces.\r\n * @img /assets/img/menu.png\r\n */\r\n@Component({\r\n  tag: 'goat-menu',\r\n  styleUrl: 'menu.scss',\r\n  shadow: true,\r\n})\r\nexport class Menu implements ComponentInterface {\r\n\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop() showLoader: boolean = false;\r\n\r\n  @Prop({ mutable: true }) value?: string | number;\r\n\r\n  @Prop({ mutable: true }) empty: boolean = false;\r\n\r\n  @Prop({ mutable: true }) emptyState: any = {\r\n    'headline': 'No items',\r\n    'description': 'There are no items to display',\r\n  };\r\n\r\n  @State()\r\n  internalEmptyState: any;\r\n\r\n  @Watch('emptyState')\r\n  parseEmptyState() {\r\n    if (typeof this.emptyState === 'string') {\r\n      this.internalEmptyState = JSON.parse(this.emptyState);\r\n    }\r\n  }\r\n\r\n  @Listen('keydown', { target: 'window' })\r\n  handleKeyDown(evt: KeyboardEvent) {\r\n    const path = evt.composedPath();\r\n    let menuItem = null;\r\n    for (const elm of path) {\r\n      // @ts-ignore\r\n      if (elm.tagName === 'GOAT-MENU-ITEM') {\r\n        menuItem = elm;\r\n      }\r\n      if (elm !== this.elm)\r\n        continue;\r\n      if (evt.key === 'ArrowDown') {\r\n        evt.preventDefault();\r\n        this.focusNextItem(menuItem);\r\n      } else if (evt.key === 'ArrowUp') {\r\n        evt.preventDefault();\r\n        this.focusPreviousItem(menuItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets focus on first menu item. Use this method instead of the global\r\n   * `element.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    const firstMenuItem = this.getFirstItem();\r\n    firstMenuItem?.setFocus();\r\n  }\r\n\r\n  private getFirstItem() {\r\n    return this.elm.querySelector('goat-menu-item');\r\n  }\r\n\r\n  private focusNextItem(currentItem) {\r\n    let nextItem: any = currentItem.nextElementSibling;\r\n    do {\r\n      if (nextItem && nextItem.tagName === 'GOAT-MENU-ITEM' && !nextItem.disabled) {\r\n        nextItem.setFocus();\r\n        return;\r\n      }\r\n      if (!nextItem) {\r\n        nextItem = this.elm.querySelector('goat-menu-item');\r\n      } else {\r\n        nextItem = nextItem.nextElementSibling;\r\n      }\r\n    } while (nextItem !== currentItem);\r\n  }\r\n\r\n  private focusPreviousItem(currentItem) {\r\n    let previousItem: any = currentItem.previousElementSibling;\r\n    do {\r\n      if (previousItem && previousItem.tagName === 'GOAT-MENU-ITEM' && !previousItem.disabled) {\r\n        previousItem.setFocus();\r\n        return;\r\n      }\r\n      if (!previousItem) {\r\n        previousItem = this.elm.querySelector('goat-menu-item:last-child');\r\n      } else {\r\n        previousItem = previousItem.previousElementSibling;\r\n      }\r\n    } while (previousItem !== currentItem);\r\n  }\r\n\r\n\r\n  componentDidLoad() {\r\n    this.parseEmptyState();\r\n  }\r\n\r\n\r\n  render() {\r\n    return <div class='menu'>\r\n      <slot />\r\n      {this.renderEmptyState()}\r\n    </div>;\r\n  }\r\n\r\n  private renderEmptyState() {\r\n    if (this.empty)\r\n      return <goat-empty-state class='empty-menu' {...this.internalEmptyState} />;\r\n  }\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.menu-item {\r\n  cursor: pointer;\r\n  @include font-style(text-md);\r\n  padding: v(--spacing-2) v(--spacing-4);\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: v(--spacing-2);\r\n  color: v(--text-secondary);\r\n  outline: none;\r\n\r\n  .item-section {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .slot-main {\r\n    display: block;\r\n    flex: 1;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  .slot-end {\r\n    color: v(--text-05);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n.menu-item {\r\n  &:hover, &.has-focus:not(.active) {\r\n    background: v(--hover-ui);\r\n    color: v(--text-primary);\r\n    .slot-end {\r\n      color: v(--icon-01);\r\n    }\r\n  }\r\n\r\n  &.active, &.selected {\r\n    background: v(--selected-ui);\r\n  }\r\n}\r\n\r\n.menu-item.has-focus:not(.active) {\r\n  @include focus-ring;\r\n}\r\n\r\n.menu-item.disabled {\r\n  cursor: not-allowed;\r\n  color: v(--text-disabled) !important;\r\n  background-color: v(--disabled-01) !important;\r\n\r\n  &:hover, &.has-focus:not(.active) {\r\n    color: v(--text-disabled) !important;\r\n    background-color: v(--disabled-01) !important;\r\n  }\r\n\r\n  &.active, &.selected {\r\n    color: v(--text-disabled) !important;\r\n    background-color: v(--disabled-01) !important;\r\n  }\r\n}\r\n\r\n\r\n.menu-item:not(.start-slot-has-content) {\r\n  .slot-start {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.menu-item:not(.end-slot-has-content) {\r\n  .slot-end {\r\n    display: none;\r\n  }\r\n}\r\n\r\n\r\n","import { Component, Element, Event, EventEmitter, h, Host, Listen, Method, Prop, State } from '@stencil/core';\r\nimport { getComponentIndex } from '../../../utils/utils';\r\n\r\n\r\n@Component({\r\n  tag: 'goat-menu-item',\r\n  styleUrl: 'menu-item.scss',\r\n  shadow: true,\r\n})\r\nexport class GoatMenu {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  private nativeInput?: HTMLElement;\r\n\r\n  private tabindex?: string | number = 1;\r\n\r\n\r\n  /**\r\n   * The menu item value.\r\n   */\r\n  @Prop({mutable: true}) value?: string | number | null;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * Menu item selection state.\r\n   */\r\n  @Prop({ reflect: true }) selected: boolean = false;\r\n\r\n  /**\r\n   * Emitted when the menu item is clicked.\r\n   */\r\n  @Event({ eventName: 'goat:menu-item-click' }) goatMenuItemClick: EventEmitter;\r\n\r\n\r\n  @State() startSlotHasContent = false;\r\n  @State() endSlotHasContent = false;\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.blur();\r\n    }\r\n  }\r\n\r\n  @Listen('mouseup', { target: 'window' })\r\n  windowMouseUp() {\r\n    if (this.isActive)\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Listen('keyup', { target: 'window' })\r\n  windowKeyUp(evt) {\r\n    if (this.isActive && (evt.key == ' '))\r\n      this.isActive = false;\r\n  }\r\n\r\n  @State() hasFocus = false;\r\n  @State() isActive = false;\r\n  @Element() elm!: HTMLElement;\r\n\r\n  private clickHandler = (event) => {\r\n    if (!this.disabled) {\r\n      this.goatMenuItemClick.emit({\r\n        value: this.value || this.elm.innerText\r\n      });\r\n    } else {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n  };\r\n\r\n  private blurHandler = () => {\r\n    this.hasFocus = false;\r\n  };\r\n\r\n  private focusHandler = () => {\r\n    this.hasFocus = true;\r\n  };\r\n\r\n  private mouseDownHandler = () => {\r\n    this.isActive = true;\r\n  };\r\n\r\n  private keyDownHandler = (evt) => {\r\n    if (evt.key == ' ') {\r\n      evt.preventDefault();\r\n      this.isActive = true;\r\n      this.clickHandler(evt);\r\n    }\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n  render = () => {\r\n    return <Host active={this.isActive} has-focus={this.hasFocus}>\r\n      <div\r\n        ref={(el) => this.nativeInput = el as HTMLElement}\r\n        class={{\r\n          'menu-item': true,\r\n          'selected': this.selected,\r\n          'active': this.isActive,\r\n          'disabled': this.disabled,\r\n          'has-focus': this.hasFocus,\r\n          'start-slot-has-content': this.startSlotHasContent,\r\n          'end-slot-has-content': this.endSlotHasContent,\r\n        }}\r\n        tabindex={this.tabindex}\r\n        onBlur={this.blurHandler}\r\n        onFocus={this.focusHandler}\r\n        onClick={this.clickHandler}\r\n        onMouseDown={this.mouseDownHandler}\r\n        onKeyDown={this.keyDownHandler}\r\n        aria-disabled={this.disabled}>\r\n\r\n        <div class=\"item-section slot-start\">\r\n          <slot name=\"start\" />\r\n        </div>\r\n\r\n        <div class='item-section slot-main'>\r\n          <slot />\r\n        </div>\r\n\r\n        <div class=\"item-section slot-end\">\r\n          <slot name=\"end\" />\r\n        </div>\r\n\r\n      </div>\r\n    </Host>;\r\n  };\r\n\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n$tag-background-color: var(--tag-background-color, v(--tag-background-gray));\r\n$tag-color: var(--tag-color, v(--tag-color-gray));\r\n$tag-hover-color: var(--tag-color, v(--tag-hover-gray));\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.tag {\r\n  @include font-style(text-sm);\r\n  background: $tag-background-color;\r\n  color: $tag-color;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.tag-content {\r\n  padding: 0 .5rem;\r\n}\r\n\r\n:host([filter]) .tag-content {\r\n  padding-inline-end: .25rem;\r\n}\r\n\r\n.close-btn {\r\n  border-radius: 12px;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: none;\r\n  background: transparent;\r\n  line-height: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.close-btn:hover{\r\n  background: $tag-hover-color;\r\n  .close-btn-icon {\r\n    color: v(--background);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Sizes\r\n */\r\n.tag.size-md {\r\n  height: 1.5rem;\r\n  border-radius: 12px;\r\n}\r\n\r\n\r\n.tag.size-sm {\r\n  height: 1.125rem;\r\n  border-radius: 9px;\r\n}\r\n\r\n@each $color in [gray, blue, green, red, yellow, primary, success, info, warning, error] {\r\n  :host(.color-#{$color}) .tag {\r\n    --tag-background-color: #{v(--tag-background-#{$color})};\r\n    --tag-color: #{v(--tag-color-#{$color})};\r\n    --tag-hover-color: #{v(--tag-hover-#{$color})};\r\n  }\r\n}\r\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop } from '@stencil/core';\r\n\r\n/**\r\n * @name Tag\r\n * @description Use tags to label, categorize, or organize items using keywords that describe them.\r\n * @example <goat-tag class=\"color-red\">Important</goat-tag>\r\n */\r\n@Component({\r\n  tag: 'goat-tag',\r\n  styleUrl: 'tag.scss',\r\n  shadow: true,\r\n})\r\nexport class Tag implements ComponentInterface {\r\n\r\n  /**\r\n   * Text size.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' = 'md';\r\n\r\n  @Prop({ reflect: true }) filter: boolean = false;\r\n\r\n  @Prop({ reflect: true }) value: string = '';\r\n\r\n  @Event({ eventName: 'goat:click' }) goatClick: EventEmitter;\r\n\r\n  @Event({ eventName: 'goat:tag-dismiss' }) goatTagDismissClick: EventEmitter;\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  private dismissClickHandler = () => {\r\n    this.goatTagDismissClick.emit({ value: this.value || this.elm.textContent });\r\n  };\r\n\r\n  renderCloseButton() {\r\n    if (!this.filter) {\r\n      return;\r\n    }\r\n    const size = this.size === 'md' ? '24px' : '16px';\r\n    return <button class='close-btn' onClick={() => this.dismissClickHandler()}>\r\n      <goat-icon class='close-btn-icon inherit' name='x' size={size}></goat-icon>\r\n    </button>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class={{ 'tag': true, [`size-${this.size}`]: true }}>\r\n          <div class='tag-content'>\r\n            <slot />\r\n          </div>\r\n          {this.renderCloseButton()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","@import \"../../../globalStyles/commons\";\n\n\n.heading {\n  font-weight: v(--font-weight-semi-bold);\n  margin: 0;\n}\n\n.paragraph {\n  margin: 0;\n}\n\n:host([type=\"heading\"]) {\n  display: block;\n  margin-bottom: v(--spacing-4);\n\n  &:host([size=\"xl\"]) {\n    .heading {\n      @include font-style(display-xl);\n    }\n  }\n\n  &:host([size=\"lg\"]) {\n    .heading {\n      @include font-style(display-lg);\n    }\n  }\n\n  &:host([size=\"md\"]) {\n    .heading {\n      @include font-style(display-md);\n    }\n  }\n\n  &:host([size=\"sm\"]) {\n    .heading {\n      @include font-style(display-sm);\n    }\n  }\n\n  &:host([size=\"xs\"]) {\n    .heading {\n      @include font-style(display-xs);\n    }\n  }\n\n}\n\n:host([type=\"paragraph\"]) {\n  display: block;\n  margin-bottom: v(--spacing-2);\n\n  &:host([size=\"xl\"]) {\n    .paragraph {\n      @include font-style(text-xl);\n    }\n  }\n\n  &:host([size=\"lg\"]) {\n    .paragraph {\n      @include font-style(text-lg);\n    }\n  }\n\n  &:host([size=\"md\"]) {\n    .paragraph {\n      @include font-style(text-md);\n    }\n  }\n\n  &:host([size=\"sm\"]) {\n    .paragraph {\n      @include font-style(text-sm);\n    }\n  }\n\n  &:host([size=\"xs\"]) {\n    .paragraph {\n      @include font-style(text-xs);\n    }\n  }\n\n}\n\n:host([type=\"text\"]) {\n  display: inline-block;\n\n  &:host([size=\"xl\"]) {\n    .text {\n      @include font-style(text-xl);\n    }\n  }\n\n  &:host([size=\"lg\"]) {\n    .text {\n      @include font-style(text-lg);\n    }\n  }\n\n  &:host([size=\"md\"]) {\n    .text {\n      @include font-style(text-md);\n    }\n  }\n\n  &:host([size=\"sm\"]) {\n    .text {\n      @include font-style(text-sm);\n    }\n  }\n\n  &:host([size=\"xs\"]) {\n    .text {\n      @include font-style(text-xs);\n    }\n  }\n\n}\n\n\n:host {\n  color: var(--text-color, v(--text-primary));\n\n  &:host([shade=\"secondary\"]) {\n    color: var(--text-shade-secondary, v(--text-secondary));\n  }\n\n  &:host([shade=\"tertiary\"]) {\n    color: var(--text-share-tertiary, v(--text-05));\n  }\n}\n\n\n:host(.inherit) {\n  color: inherit;\n}\n\n","import { Component, ComponentInterface, h, Host, Prop } from '@stencil/core';\r\n\r\n/**\r\n * @name Text\r\n * @description Typography are used for rendering headlines, paragraphs and captions.\r\n * @example <goat-text type=\"heading\" level=\"1\">Heading</goat-typography>\r\n */\r\n@Component({\r\n  tag: 'goat-text',\r\n  styleUrl: 'text.scss',\r\n  shadow: true,\r\n})\r\nexport class Text implements ComponentInterface {\r\n\r\n\r\n  @Prop({ reflect: true }) type: 'heading' | 'paragraph' | 'text' = 'text';\r\n\r\n  @Prop({ reflect: true }) shade: 'primary' | 'secondary' | 'tertiary' = 'primary';\r\n\r\n  /**\r\n   * The heading level.\r\n   */\r\n  @Prop() level: 1 | 2 | 3 | 4 | 5 = 1;\r\n\r\n  /**\r\n   * Text size.\r\n   */\r\n  @Prop({ reflect: true, mutable: true}) size: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        {(() => {\r\n          if (this.type === 'heading')\r\n            return this.renderHeading();\r\n          else if (this.type === 'paragraph')\r\n            return this.renderParagraph();\r\n          else if (this.type === 'text')\r\n            return this.renderText();\r\n        })()}\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  componentWillLoad() {\r\n    if (this.type === 'heading') {\r\n      if (!this.size) {\r\n        if (this.level === 1) {\r\n          this.size = 'xl';\r\n        } else if (this.level === 2) {\r\n          this.size = 'lg';\r\n        } else if (this.level === 3) {\r\n          this.size = 'md';\r\n        } else if (this.level === 4) {\r\n          this.size = 'sm';\r\n        } else if (this.level === 5) {\r\n          this.size = 'xs';\r\n        }\r\n      }\r\n    } else {\r\n      if (!this.size) {\r\n        this.size = 'md';\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  renderHeading() {\r\n    const HeadingTag = `h${this.level}`;\r\n\r\n    return (\r\n      <HeadingTag class='heading'>\r\n        <slot />\r\n      </HeadingTag>\r\n    );\r\n  }\r\n\r\n  renderParagraph() {\r\n    return (\r\n      <p class={{ 'paragraph': true, [`size-${this.size}`]: true }}>\r\n        <slot />\r\n      </p>\r\n    );\r\n  }\r\n\r\n  renderText() {\r\n    return (\r\n      <span class={{ 'text': true, [`size-${this.size}`]: true }}>\r\n        <slot />\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n"]}