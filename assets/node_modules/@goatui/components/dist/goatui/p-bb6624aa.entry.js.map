{"version":3,"sources":["src/components/form/checkbox/checkbox.scss?tag=goat-checkbox&encapsulation=shadow","src/components/form/checkbox/checkbox.tsx","src/components/form/form-control/form-control.scss?tag=goat-form-control&encapsulation=shadow","src/components/form/form-control/form-control.tsx"],"names":["checkboxCss","Checkbox","this","gid","getComponentIndex","mouseDownHandler","isActive","keyDownHandler","evt","key","preventDefault","clickHandler","tabindex","ev","disabled","readonly","value","JSON","parse","nativeInput","intermediate","goatChange","emit","iconContainer","focus","blurHandler","hasFocus","goatBlur","focusHandler","goatFocus","[object Object]","blur","elm","hasAttribute","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","slotHasContent","hasChildNodes","h","Host","has-focus","active","class","checkbox","state-checked","state-intermediate","size","required","rounded","has-content","Object","assign","ref","onKeyUp","keyCode","onMouseDown","onKeyDown","onBlur","onFocus","role","aria-disabled","aria-required","aria-checked","tick","animate","type","checked","aria-hidden","onClick","formControlCss","FormControl","setAttribute","compName","controlElm","querySelector","passRequiredToField","passLabelToField","label","oldProps","aria-label","newVal","_oldVal","propName","error","success","warning","caption","getInputState","form-control","inline","renderLabel","renderSubtitle"],"mappings":"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","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n@import \"checkbox-animation\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  color: v(--text-primary);\r\n}\r\n\r\n.checkbox {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &.has-content {\r\n    gap: v(--spacing-2);\r\n  }\r\n\r\n\r\n  .input-native {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    border: 0;\r\n  }\r\n\r\n  .box {\r\n    position: relative;\r\n    background: v(--field-01);\r\n    border: 1px solid v(--ui-04);\r\n    border-radius: v(--border-radius);\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    &:before {\r\n      pointer-events: none;\r\n      content: \"\";\r\n      display: block;\r\n      width: 100%;\r\n      height: 100%;\r\n      box-sizing: border-box;\r\n      border-radius: v(--border-radius);\r\n      border: 1px solid transparent;\r\n    }\r\n  }\r\n\r\n  &.rounded {\r\n    .box {\r\n      border-radius: 50%;\r\n\r\n      &:before {\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n  }\r\n\r\n  .tick {\r\n    position: absolute;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  &.has-focus:not(.active) {\r\n    .box {\r\n      @include focus-ring;\r\n      border-color: transparent;\r\n    }\r\n\r\n    &:not(.state-checked) .box:before {\r\n      border-color: v(--icon-01);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n:host(.light) .box {\r\n  background-color: v(--field-02);\r\n}\r\n\r\n\r\n.checkbox.state-checked {\r\n  .box {\r\n    background: v(--color-primary);\r\n    border-color: transparent;\r\n  }\r\n\r\n  .tick {\r\n    width: 33%;\r\n    height: 67%;\r\n    border-right: 3px solid transparent;\r\n    border-bottom: 3px solid transparent;\r\n    transform: rotate(45deg);\r\n    transform-origin: 0 100%;\r\n\r\n    &.animate {\r\n      animation: checkbox-check 125ms 250ms cubic-bezier(.4, .0, .23, 1) forwards;\r\n    }\r\n\r\n    &:not(.animate) {\r\n      border-color: v(--color-white);\r\n      top: -15%;\r\n      left: 15%;\r\n    }\r\n  }\r\n\r\n  &:hover .box {\r\n    background: v(--color-primary-70);\r\n  }\r\n\r\n  &.active .box {\r\n    border-color: v(--color-white);\r\n  }\r\n\r\n  &.has-focus:not(.active) {\r\n    .box {\r\n      @include focus-ring;\r\n      border-color: v(--color-white);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.checkbox.state-intermediate {\r\n  .box {\r\n    background: v(--color-primary);\r\n    border-color: transparent;\r\n  }\r\n\r\n\r\n  .tick {\r\n    width: 67%;\r\n    height: 0;\r\n    margin: auto;\r\n    border-right: 3px solid transparent;\r\n    border-bottom: 3px solid transparent;\r\n    transform-origin: 0 100%;\r\n\r\n    &.animate {\r\n      animation: checkbox-slash 125ms 250ms cubic-bezier(.4, .0, .23, 1) forwards;\r\n    }\r\n\r\n    &:not(.animate) {\r\n      border-color: v(--color-white);\r\n    }\r\n  }\r\n\r\n  &:hover .box {\r\n    background: v(--color-primary-90);\r\n  }\r\n\r\n  &.active .box {\r\n    border-color: v(--color-white);\r\n  }\r\n\r\n  &.has-focus:not(.active) {\r\n    .box {\r\n      @include focus-ring;\r\n      border-color: v(--color-white);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SIZES\r\n */\r\n.checkbox.size-sm {\r\n\r\n  @include font-style(text-sm);\r\n\r\n  .box {\r\n    width: 1.25rem;\r\n    height: 1.25rem;\r\n  }\r\n\r\n}\r\n\r\n.checkbox.size-md {\r\n  @include font-style(text-md);\r\n\r\n  .box {\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n  }\r\n}\r\n\r\n.checkbox.size-lg {\r\n  @include font-style(text-lg);\r\n\r\n  .box {\r\n    width: 1.75rem;\r\n    height: 1.75rem;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * States\r\n */\r\n@each $state in [success, warning, error] {\r\n  :host-context(.input-state-#{$state}) {\r\n    .checkbox .box {\r\n      border-color: v(--color-#{$state});\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox.readonly {\r\n  cursor: default;\r\n  color: v(--text-disabled) !important;\r\n  border-color: v(--text-disabled) !important;\r\n\r\n  &.state-checked .box {\r\n    background: v(--text-disabled) !important;\r\n  }\r\n\r\n  .box {\r\n    border: 1px solid v(--text-disabled) !important;\r\n  }\r\n\r\n  .tick {\r\n    border-color: #{v(--disabled-01)} !important;\r\n  }\r\n\r\n}\r\n\r\n\r\n.checkbox.disabled {\r\n  cursor: not-allowed;\r\n  color: v(--text-disabled) !important;\r\n  border-color: v(--text-disabled) !important;\r\n\r\n  &.state-checked .box {\r\n    background: v(--text-disabled) !important;\r\n  }\r\n\r\n  .box {\r\n    border: 1px solid v(--text-disabled) !important;\r\n  }\r\n\r\n  .tick {\r\n    border-color: #{v(--disabled-01)} !important;\r\n  }\r\n\r\n}\r\n\r\n\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  State,\r\n} from '@stencil/core';\r\nimport { getComponentIndex } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Checkbox\r\n * @description Captures boolean input with an optional indeterminate mode.\r\n * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>\r\n */\r\n@Component({\r\n  tag: 'goat-checkbox',\r\n  styleUrl: 'checkbox.scss',\r\n  shadow: true,\r\n})\r\nexport class Checkbox implements ComponentInterface, InputComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The checkbox label.\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value: boolean = false;\r\n\r\n  @Prop({ mutable: true }) intermediate: boolean = false;\r\n\r\n  @Prop() rounded: boolean = false;\r\n\r\n  /**\r\n   * The button size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop() size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean = false;\r\n\r\n\r\n  @Prop({ reflect: true }) readonly : boolean = false;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  @Prop( {reflect: true, mutable: true}) configAria: any = {};\r\n\r\n  /**\r\n   * On change of input a CustomEvent 'goat:change' will be triggered. Event details contains parent event, oldValue, newValue of input.\r\n   */\r\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.blur();\r\n    }\r\n  }\r\n\r\n  @Listen('mouseup', { target: 'window' })\r\n  windowMouseUp() {\r\n    if (this.isActive)\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Listen('keyup', { target: 'window' })\r\n  windowKeyUp(evt) {\r\n    if (this.isActive && (evt.key == ' '))\r\n      this.isActive = false;\r\n  }\r\n\r\n  private mouseDownHandler = () => {\r\n    this.isActive = true;\r\n  };\r\n\r\n  private keyDownHandler = (evt) => {\r\n    if (evt.key == ' ') {\r\n      evt.preventDefault();\r\n      this.isActive = true;\r\n      this.clickHandler(evt);\r\n    }\r\n  };\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeInput?: HTMLInputElement;\r\n  private iconContainer?: HTMLElement;\r\n  private tabindex?: string | number = 1;\r\n  @State() hasFocus = false;\r\n  @State() animate = true;\r\n  @State() isActive = false;\r\n  @State() slotHasContent = false;\r\n\r\n  private clickHandler = (ev: MouseEvent | KeyboardEvent) => {\r\n    if (!this.disabled && !this.readonly) {\r\n      this.value = !JSON.parse(this.nativeInput.value);\r\n      this.intermediate = false;\r\n      this.goatChange.emit(ev);\r\n      this.iconContainer.focus();\r\n    }\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.goatBlur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.goatFocus.emit(ev);\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.slotHasContent = this.elm.hasChildNodes();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host has-focus={this.hasFocus} active={this.isActive}>\r\n        <label class={{\r\n          'checkbox': true,\r\n          'state-checked': this.value,\r\n          'state-intermediate': !this.value && this.intermediate,\r\n          [`size-${this.size}`]: true,\r\n          'has-focus': this.hasFocus,\r\n          'active': this.isActive,\r\n          'disabled': this.disabled,\r\n          'readonly': this.readonly,\r\n          'required': this.required,\r\n          'rounded': this.rounded,\r\n          'has-content': this.slotHasContent,\r\n        }}>\r\n          <div class='box'\r\n               tabindex={this.tabindex}\r\n               ref={elm => this.iconContainer = elm}\r\n               onKeyUp={(evt) => {\r\n                 if (evt.keyCode === 13) {\r\n                   this.clickHandler(evt);\r\n                 }\r\n               }}\r\n               onMouseDown={this.mouseDownHandler}\r\n               onKeyDown={this.keyDownHandler}\r\n               onBlur={this.blurHandler}\r\n               onFocus={this.focusHandler}\r\n\r\n               role=\"checkbox\"\r\n               aria-disabled={this.disabled + ''}\r\n               aria-required={this.required + ''}\r\n               aria-checked={this.value + ''}\r\n               {...this.configAria}>\r\n            <div class={{\r\n              'tick': true,\r\n              'animate': this.animate,\r\n            }} />\r\n          </div>\r\n\r\n          <input type='checkbox'\r\n                 class='input-native'\r\n                 name={this.name}\r\n                 value={this.value + ''}\r\n                 checked={this.value}\r\n                 aria-hidden='true'\r\n                 required={this.required}\r\n                 ref={elm => this.nativeInput = elm}\r\n                 tabindex='-1'\r\n                 onClick={this.clickHandler} />\r\n\r\n          <div class='slot-container'>\r\n            <slot />\r\n          </div>\r\n\r\n        </label>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n  margin-bottom: v(--spacing-4);\r\n}\r\n\r\n.form-control {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  slot::slotted(goat-input),\r\n  slot::slotted(goat-textarea),\r\n  slot::slotted(goat-checkbox),\r\n  slot::slotted(goat-radio),\r\n  slot::slotted(goat-code-editor){\r\n    margin-bottom: 0.375rem;\r\n  }\r\n}\r\n\r\n.label {\r\n  @include font-style(text-sm);\r\n  font-weight: v(--font-weight-medium);\r\n  margin-bottom: 0.375rem;\r\n\r\n  color: v(--text-secondary);\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n\r\n  .required {\r\n    color: v(--danger-02);\r\n    padding-right: v(--spacing-1);\r\n  }\r\n}\r\n\r\n.subtitle {\r\n  @include font-style(text-xs);\r\n  font-weight: v(--font-weight-regular);\r\n  .subtitle-caption {\r\n    color: v(--text-05);\r\n  }\r\n  .subtitle-error {\r\n    color: v(--support-error-inverse);\r\n  }\r\n  .subtitle-success {\r\n    color: v(--support-success-inverse);\r\n  }\r\n  .subtitle-warning {\r\n    color: v(--support-warning-inverse);\r\n  }\r\n}\r\n\r\n\r\n.form-control.inline {\r\n  flex-direction: row;\r\n  align-items: center;\r\n  .label {\r\n    margin-bottom: 0;\r\n    margin-inline-end: v(--spacing-2);\r\n  }\r\n}\r\n","import { Component, ComponentInterface, Element, h, Host, Prop } from '@stencil/core';\r\n\r\n/**\r\n * @name Form Control\r\n * @description The Form Control component adds a label and caption for its child control.\r\n * @example <goat-form-control label='Full Name' required>\r\n *   <goat-input type='text'></goat-input>\r\n * </goat-form-control>\r\n */\r\n@Component({\r\n  tag: 'goat-form-control',\r\n  styleUrl: 'form-control.scss',\r\n  shadow: true,\r\n})\r\nexport class FormControl implements ComponentInterface {\r\n\r\n  /**\r\n   * The label for the form control.\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * The caption for the form control.\r\n   */\r\n  @Prop() caption: string;\r\n\r\n\r\n  @Prop() error: string;\r\n\r\n  @Prop() warning: string;\r\n\r\n  @Prop() success: string;\r\n\r\n  @Prop() inline: boolean = false;\r\n\r\n  /**\r\n   * Whether the form control is required.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  private controlElm!: HTMLElement;\r\n\r\n  componentDidLoad() {\r\n    this.elm.setAttribute('role', 'group');\r\n    for (const compName of ['goat-input', 'goat-textarea', 'goat-select', 'goat-checkbox', 'goat-radio', 'goat-code-editor']) {\r\n      this.controlElm = this.elm.querySelector(`${compName}`);\r\n      this.passRequiredToField(this.required);\r\n      this.passLabelToField(this.label);\r\n    }\r\n  }\r\n\r\n  passRequiredToField(required: boolean) {\r\n    if (this.controlElm) {\r\n      // @ts-ignore\r\n      this.controlElm.required = required;\r\n    }\r\n  }\r\n\r\n  passLabelToField(label: string) {\r\n    if (this.controlElm) {\r\n      // @ts-ignore\r\n      const oldProps = this.controlElm.configAria;\r\n      // @ts-ignore\r\n      this.controlElm.configAria = {\r\n        'aria-label': label,\r\n        ...oldProps,\r\n      };\r\n    }\r\n  }\r\n\r\n  componentShouldUpdate(newVal: any, _oldVal, propName: string): boolean | void {\r\n    if (propName === 'required') {\r\n      this.passRequiredToField(newVal);\r\n    } else if (propName === 'label') {\r\n      this.passLabelToField(newVal);\r\n    }\r\n  }\r\n\r\n  renderLabel() {\r\n    if (this.label)\r\n      return <label class='label'>\r\n        {this.required && <span class='required'>*</span>}\r\n        {this.label}\r\n      </label>;\r\n  }\r\n\r\n\r\n  renderSubtitle() {\r\n    if (this.error)\r\n      return <div class='subtitle-error'>\r\n        {this.error}\r\n      </div>;\r\n    else if (this.success)\r\n      return <div class='subtitle-success'>\r\n        {this.success}\r\n      </div>;\r\n    else if (this.warning)\r\n      return <div class='subtitle-warning'>\r\n        {this.warning}\r\n      </div>;\r\n    else if (this.caption)\r\n      return <div class='subtitle-caption'>\r\n        {this.caption}\r\n      </div>;\r\n  }\r\n\r\n  getInputState() {\r\n    if (this.error)\r\n      return 'input-state-error';\r\n    else if (this.success)\r\n      return 'input-state-success';\r\n    else if (this.warning)\r\n      return 'input-state-warning';\r\n    return 'input-state-default';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class={{\r\n        [this.getInputState()]: true,\r\n      }}>\r\n        <div class={{ 'form-control': true, 'inline': this.inline }}>\r\n          {this.renderLabel()}\r\n          <div class='field'>\r\n            <slot />\r\n          </div>\r\n          <div class='subtitle'>\r\n            {this.renderSubtitle()}\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}