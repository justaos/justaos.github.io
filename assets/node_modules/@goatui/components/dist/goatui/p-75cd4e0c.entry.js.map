{"version":3,"sources":["src/components/content/notification-manager/notification-manager.scss?tag=goat-notification-manager&encapsulation=shadow","src/components/content/notification-manager/notification-manager.tsx"],"names":["notificationManagerCss","getNotificationIndex","counter","NotificationManager","isDarkMode","[object Object]","evt","detail","target","this","name","procced","preventDefault","stopPropagation","notification","id","type","message","state","hide","notifications","concat","filter","n","setTimeout","title","subtitle","messageType","observeThemeChange","h","Object","assign","props","innerHTML","slot","Host","class","notification-manager","position","map","hidden","renderNotification"],"mappings":"oGAAA,MAAMA,EAAyB,mmDCG/B,MAAMC,EAAuB,MAC3B,IAAIC,EAAU,EACd,OAAA,WACE,MAAO,GAAGA,QAHe,SAiBhBC,EAAmB,yCAEU,uBACsC,kCAGhD,mBACCC,IAI/BC,YAAYC,GACV,IAAKA,EAAIC,OAAOC,SAAWC,KAAKC,MAAQD,KAAKC,OAAS,YAAcJ,EAAIC,OAAOI,QAAS,CACtFL,EAAIM,iBACJN,EAAIO,kBACJP,EAAIC,OAAOI,QAAU,KACrB,MAAMG,EAAe,CACnBC,GAAId,IACJe,KAAM,QACNC,QAASX,EAAIC,OAAOU,QACpBC,MAAOZ,EAAIC,OAAOW,MAClBC,KAAM,OAERV,KAAKW,cAAgBX,KAAKW,cAAcC,OAAO,CAACP,IAAeQ,QAAOC,IAAMA,EAAEJ,OAC9EK,YAAW,KACTV,EAAaK,KAAO,KACpBV,KAAKW,cAAgB,IAAIX,KAAKW,iBAG7B,MAKPf,mBAAmBC,GACjB,IAAKA,EAAIC,OAAOC,SAAWC,KAAKC,MAAQD,KAAKC,OAAS,YAAcJ,EAAIC,OAAOI,QAAS,CACtFL,EAAIM,iBACJN,EAAIO,kBACJP,EAAIC,OAAOI,QAAU,KACrB,MAAMG,EAAe,CACnBC,GAAId,IACJe,KAAM,eACNS,MAAOnB,EAAIC,OAAOkB,MAClBC,SAAUpB,EAAIC,OAAOmB,SACrBC,YAAarB,EAAIC,OAAOoB,YACxBT,MAAOZ,EAAIC,OAAOW,MAClBC,KAAM,OAERV,KAAKW,cAAgBX,KAAKW,cAAcC,OAAO,CAACP,IAAeQ,QAAOC,IAAMA,EAAEJ,OAC9EK,YAAW,KACTV,EAAaK,KAAO,KACpBV,KAAKW,cAAgB,IAAIX,KAAKW,iBAC7B,MAIPf,oBACEuB,GAAmB,KACjBnB,KAAKL,WAAaA,OAItBC,mBAAmBS,GACjB,GAAIA,EAAaE,KAAM,CACrB,OAAQF,EAAaE,MACnB,IAAK,QACH,OACEa,EAAA,aAAA,CAAYd,GAAI,GAAGD,EAAaC,KAAMG,MAAOJ,EAAaI,MAAOD,QAASH,EAAaG,UAE3F,IAAK,QACH,OACEY,EAAA,aAAAC,OAAAC,OAAA,GAAgBjB,EAAakB,QAEjC,IAAK,eACH,OACEH,EAAA,oBAAA,CAAmBd,GAAI,GAAGD,EAAaC,KAAMG,MAAOJ,EAAaI,OAC/DW,EAAA,MAAA,CAAKI,UAAWnB,EAAaW,MAAOS,KAAK,UACzCL,EAAA,MAAA,CAAKI,UAAWnB,EAAaY,SAAUQ,KAAK,cAGlD,QACE,OAAO,OAKf7B,SACE,OACEwB,EAACM,EAAI,KACHN,EAAA,MAAA,CAAKO,MAAO,CAAEC,uBAAwB,KAAMhC,CAAC,YAAYI,KAAK6B,YAAa,OACxE7B,KAAKW,cAAcmB,KAAKzB,GACvBe,EAAA,MAAA,CAAKO,MAAO,CAAEtB,aAAgB,KAAM0B,OAAU1B,EAAaK,OACxDV,KAAKgC,mBAAmB3B","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n@keyframes reveal {\n  0% {\n    opacity: 0;\n    transform: translateY(1rem)\n  }\n}\n\n@keyframes hide {\n  100% {\n    opacity: 0;\n    transform: translateY(-1rem);\n    visibility: hidden;\n  }\n}\n\n\n:host {\n  display: block;\n  position: absolute;\n  z-index: v(--z-index-notification-manager);\n}\n\n:host([name='global']) {\n  position: fixed;\n  width: 300px;\n}\n\n.notification-manager {\n\n  display: flex;\n  flex-direction: column;\n  margin: v(--spacing-4);\n\n  .notification {\n    animation: reveal 0.5s ease-in;\n  }\n\n  .notification.hidden {\n    display: none;\n  }\n\n}\n\n:host([position=\"bottom-right\"]) {\n  bottom: 0;\n  right: 0;\n\n  .notification-manager {\n    align-items: flex-end;\n  }\n}\n\n:host([position=\"bottom-left\"]) {\n  bottom: 0;\n  left: 0;\n\n  .notification-manager {\n    align-items: flex-start;\n  }\n}\n\n:host([position=\"top-left\"]) {\n  top: 0;\n  left: 0;\n\n  .notification-manager {\n    align-items: flex-start;\n  }\n}\n\n:host([position=\"top-right\"]) {\n  top: 0;\n  right: 0;\n\n  .notification-manager {\n    align-items: flex-end;\n  }\n}\n\n","import { Component, ComponentInterface, Element, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\n\nconst getNotificationIndex = (() => {\n  let counter = 1;\n  return (function() {\n    return `${counter++}`;\n  });\n})();\n\n/**\n * @name Notification Manager\n * @description Manages alert, toasts and notifications.\n * @img /assets/img/notification-manager.png\n */\n@Component({\n  tag: 'goat-notification-manager',\n  styleUrl: 'notification-manager.scss',\n  shadow: true,\n})\nexport class NotificationManager implements ComponentInterface {\n\n  @Prop({ reflect: true }) name: string = 'global';\n  @Prop() position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' = 'bottom-right';\n\n  @Element() elm!: HTMLElement;\n  @State() notifications: any = [];\n  @State() isDarkMode: boolean = isDarkMode();\n\n\n  @Listen('goat:toast', { target: 'window' })\n  listenToast(evt) {\n    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      evt.detail.procced = true;\n      const notification = {\n        id: getNotificationIndex(),\n        type: 'toast',\n        message: evt.detail.message,\n        state: evt.detail.state,\n        hide: false,\n      };\n      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);\n      setTimeout(() => {\n        notification.hide = true;\n        this.notifications = [...this.notifications];\n\n\n      }, 5000);\n    }\n  }\n\n  @Listen('goat:notification', { target: 'window' })\n  listenNotification(evt) {\n    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      evt.detail.procced = true;\n      const notification = {\n        id: getNotificationIndex(),\n        type: 'notification',\n        title: evt.detail.title,\n        subtitle: evt.detail.subtitle,\n        messageType: evt.detail.messageType,\n        state: evt.detail.state,\n        hide: false,\n      };\n      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);\n      setTimeout(() => {\n        notification.hide = true;\n        this.notifications = [...this.notifications];\n      }, 5000);\n    }\n  }\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  renderNotification(notification) {\n    if (notification.type) {\n      switch (notification.type) {\n        case 'toast':\n          return (\n            <goat-toast id={`${notification.id}`} state={notification.state} message={notification.message} />\n          );\n        case 'alert':\n          return (\n            <goat-alert {...notification.props} />\n          );\n        case 'notification':\n          return (\n            <goat-notification id={`${notification.id}`} state={notification.state}>\n              <div innerHTML={notification.title} slot=\"title\"/>\n              <div innerHTML={notification.subtitle} slot=\"subtitle\"/>\n            </goat-notification>\n          );\n        default:\n          return null;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'notification-manager': true, [`position-${this.position}`]: true }}>\n          {this.notifications.map((notification) => (\n            <div class={{ 'notification': true, 'hidden': notification.hide }}>\n              {this.renderNotification(notification)}\n            </div>\n          ))}\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}