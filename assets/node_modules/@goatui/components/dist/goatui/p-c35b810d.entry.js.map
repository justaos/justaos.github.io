{"version":3,"sources":["src/components/controls/button/button.scss?tag=goat-button&encapsulation=shadow","src/components/controls/button/button.tsx","src/components/content/icon/datasource.ts","src/components/content/icon/icon.scss?tag=goat-icon&encapsulation=shadow","src/components/content/icon/icon.tsx","src/components/content/spinner/spinner.scss?tag=goat-spinner&encapsulation=shadow","src/components/content/spinner/spinner.tsx"],"names":["buttonCss","Button","[object Object]","hostRef","this","gid","getComponentIndex","size","variant","block","selected","disabled","disabledReason","iconEnd","showLoader","configAria","target","hasFocus","isActive","slotHasContent","renderIcon","h","name","icon","getIconSize","class","clickHandler","event","goatClick","emit","preventDefault","stopPropagation","blurHandler","focusHandler","mouseDownHandler","keyDownHandler","evt","key","nativeInput","focus","click","ElementSize","SMALL","LARGE","X_LARGE","XX_LARGE","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","hasChildNodes","id","role","NativeElementTag","href","Host","has-focus","active","button","has-content","icon-end","show-loader","Object","assign","ref","input","onBlur","onFocus","onClick","onMouseDown","onKeyDown","aria-describedby","aria-disabled","renderDisabledReason","cache","async","fetchIcon","res","fetch","method","mode","credentials","text","iconCss","Icon","svg","newValue","fetchSvg","replace","getSize","innerHTML","spinnerCss","Spinner","MEDIUM","version","x","y","width","height","viewBox","fill","d","attributeType","attributeName","type","from","to","dur","repeatCount"],"mappings":"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","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n$border-width: 0.0625;\n$button-radius: var(--button-border-radius, #{v(--border-radius)});\n$button-border-style: var(--button-border-style, solid);\n\n$button-color: var(--button-color, v(--color-primary));\n$button-color-hover: var(--button-color-hover, v(--color-primary-70));\n$button-color-active: var(--button-color-active, v(--color-primary-80));\n$button-color-support: var(--button-color-support, $button-color);\n\n@function removeBorder($width) {\n  @return #{($width*1 - ($border-width * 2))}rem;\n}\n\n:host {\n  display: inline-block;\n  height: var(--button-height, auto);\n}\n\n.button {\n  position: relative;\n  display: flex;\n  align-items: center;\n  height: var(--button-height, auto);\n\n  .native-button {\n    font-family: var(--font-family-base);\n    text-decoration: none;\n    height: 100%;\n    cursor: pointer;\n    z-index: v(--z-index-button);\n    background: transparent;\n    padding: 0;\n    border: #{$border-width}rem #{$button-border-style} transparent;\n    border-width: var(--button-border-width, #{($border-width)}rem);\n    border-radius: #{$button-radius};\n    outline: none;\n\n    .slot-container {\n      display: none;\n    }\n  }\n\n  .button-content {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    height: 100%;\n    gap: v(--spacing-2);\n    border-radius: 2px;\n    border: #{$border-width}rem solid transparent;\n  }\n\n  .button-background {\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    border-radius: #{$button-radius};\n    pointer-events: none;\n  }\n\n  &.disabled .native-button {\n    cursor: not-allowed;\n  }\n\n  &.has-content .slot-container {\n    display: flex;\n  }\n\n}\n\n/**\n  * SIZES\n  */\n.button.size-sm, .button.size-small {\n  .button-content {\n    padding: removeBorder(0.5);\n    @include font-style(text-sm);\n    font-weight: var(--button-font-weight, v(--font-weight-medium));\n  }\n\n  &.has-content .button-content {\n    padding: removeBorder(0.5) removeBorder(0.875);\n  }\n}\n\n:host(.icon-only) {\n  .button.size-sm, .button.size-small {\n    .button-content {\n      padding: removeBorder(0.5);\n    }\n  }\n}\n\n.button.size-md, .button.size-medium {\n  .button-content {\n    padding: removeBorder(0.625);\n    @include font-style(text-sm);\n    font-weight: var(--button-font-weight, v(--font-weight-medium));\n  }\n\n  &.has-content .button-content {\n    padding: removeBorder(0.625) removeBorder(1.125);\n  }\n}\n\n:host(.icon-only) {\n  .button.size-md, .button.size-medium {\n    .button-content {\n      padding: removeBorder(0.625);\n    }\n  }\n}\n\n.button.size-lg, .button.size-large {\n  .button-content {\n    padding: removeBorder(0.625);\n    @include font-style(text-md);\n    font-weight: var(--button-font-weight, v(--font-weight-medium));\n  }\n\n  &.has-content .button-content {\n    padding: removeBorder(0.625) removeBorder(1);\n  }\n}\n\n:host(.icon-only) {\n  .button.size-lg, .button.size-large {\n    .button-content {\n      padding: removeBorder(0.625);\n    }\n  }\n}\n\n.button.size-xl {\n  .button-content {\n    padding: removeBorder(0.75);\n    @include font-style(text-md);\n    font-weight: var(--button-font-weight, v(--font-weight-medium));\n  }\n\n  &.has-content .button-content {\n    padding: removeBorder(0.75) removeBorder(1.25);\n  }\n}\n\n:host(.icon-only) {\n  .button.size-xl {\n    .button-content {\n      padding: removeBorder(0.75);\n    }\n  }\n}\n\n.button.size-xxl {\n  .button-content {\n    padding: removeBorder(1);\n    @include font-style(text-lg);\n    font-weight: var(--button-font-weight, v(--font-weight-medium));\n  }\n\n  &.has-content .button-content {\n    padding: removeBorder(1) removeBorder(1.75);\n  }\n}\n\n:host(.icon-only) {\n  .button.size-xxl {\n    .button-content {\n      padding: removeBorder(1);\n    }\n  }\n}\n\n\n/**\n * Button variant definitions\n */\n.button.variant-default {\n\n  .native-button {\n    color: var(--button-text-color, v(--color-white));\n    border-color: #{$button-color};\n  }\n\n  .button-background {\n    background: #{$button-color-support};\n  }\n\n  &:hover {\n    .native-button {\n      border-color: #{$button-color-hover};\n    }\n\n    .button-background {\n      background: #{$button-color-hover};\n    }\n  }\n\n  &.active, &.selected {\n    .native-button {\n      border-color: #{$button-color-active};\n    }\n\n    .button-background {\n      background: #{$button-color-active};\n    }\n  }\n\n  &.has-focus:not(.active) .native-button {\n    .button-content {\n      border-color: v(--color-white);\n    }\n\n    border-color: var(--button-color-focus, v(--color-primary));\n  }\n\n  &.disabled {\n    .native-button {\n      color: v(--disabled-03);\n      border-color: v(--text-disabled) !important;\n    }\n\n    .button-background {\n      background: v(--text-disabled) !important;\n    }\n\n    &.has-focus:not(.active) .native-button {\n      border-color: v(--color-neutral) !important;\n    }\n  }\n}\n\n.button.variant-outline {\n  .native-button {\n    color: #{$button-color};\n    border-color: #{$button-color};\n  }\n\n  .button-background {\n    background: transparent;\n  }\n\n\n  &:hover {\n    .native-button {\n      color: var(--button-text-color, v(--color-white));\n    }\n\n    .button-background {\n      background: #{$button-color};\n    }\n  }\n\n  &.active, &.selected {\n    .native-button {\n      color: var(--button-text-color, v(--color-white));\n      border-color: #{$button-color-active};\n    }\n\n    .button-background {\n      background: #{$button-color-active};\n    }\n  }\n\n  &.has-focus:not(.active) {\n    .native-button {\n      color: var(--button-text-color, v(--color-white));\n      border-color: var(--button-color-focus, v(--color-primary));\n    }\n\n    .button-background {\n      background: #{$button-color};\n    }\n\n    .button-content {\n      border-color: v(--color-white);\n    }\n  }\n\n  &.disabled {\n    .native-button {\n      color: v(--disabled-03) !important;\n      border-color: v(--text-disabled) !important;\n    }\n\n    .button-background {\n      background: transparent !important;\n    }\n\n    &.has-focus:not(.active) .native-button {\n      border-color: v(--color-neutral) !important;\n    }\n  }\n}\n\n.button.variant-ghost {\n  .native-button {\n    color: #{$button-color};\n    border-color: transparent;\n  }\n\n  .button-background {\n    background: transparent;\n  }\n\n  &:hover {\n    .native-button {\n      color: #{$button-color-hover};\n    }\n\n    .button-background {\n      background: v(--hover-ui);\n    }\n  }\n\n  &.active, &.selected {\n    .native-button {\n      color: #{$button-color-active};\n    }\n\n    .button-background {\n      background: v(--active-ui);\n    }\n  }\n\n  &.has-focus:not(.active) .native-button {\n    border-color: var(--button-color-focus, v(--color-primary));\n  }\n\n  &.disabled {\n    .native-button {\n      color: v(--disabled-03) !important;\n      border-color: transparent !important;\n    }\n\n    .button-background {\n      background: transparent !important;\n    }\n\n    &.has-focus:not(.active) .native-button {\n      border-color: var(--button-color-focus, v(--color-neutral)) !important;\n    }\n  }\n}\n\n/**\n  * Color Variants\n  */\n@each $color in [brand-primary, brand-secondary, primary, success, error, info, warning, secondary] {\n  :host(.color-#{$color}) .button {\n    --button-color: #{v(--color-#{$color})};\n    --button-color-hover: #{v(--color-#{$color}-70)};\n    --button-color-active: #{v(--color-#{$color}-80)};\n    --button-color-support: #{v(--color-#{$color})};\n  }\n}\n\n:host(.color-secondary) .button {\n  --button-color: #{v(--color-black)};\n  --button-color-hover: #{v(--color-black)};\n  --button-color-active: #{v(--color-black)};\n  --button-color-support: #{v(--color-black)};\n}\n\n\n:host-context([data-theme=\"dark\"]):host(.color-secondary) .button {\n  --button-color: #{v(--color-white)};\n  --button-text-color: #{v(--color-black)};\n  --button-color-hover: #{v(--color-white)};\n  --button-color-active: #{v(--color-white)};\n  --button-color-support: #{v(--color-white)};\n}\n\n\n:host(.full-height) {\n  .button {\n    height: 100%;\n  }\n}\n\n.button.icon-end .button-content {\n  flex-direction: row-reverse;\n}\n\n\n:host([block]) {\n  display: block;\n\n  .native-button {\n    width: 100%;\n  }\n\n  .button-content {\n    justify-content: center;\n  }\n\n  .spinner {\n    margin: auto;\n  }\n}\n\n:host(.rounded) {\n  .native-button {\n    border-radius: 100%;\n  }\n\n  .button-content {\n    border-radius: 100%;\n  }\n\n  .button-background {\n    border-radius: 100%;\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { ElementSize, getComponentIndex } from '../../../utils/utils';\n\n/**\n * @name Button\n * @description An interactive button with a range of presentation options.\n * @example <goat-button>\n *   Button CTA\n *   </goat-button>\n */\n@Component({\n  tag: 'goat-button',\n  styleUrl: 'button.scss',\n  shadow: true,\n})\nexport class Button implements ComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * Button size.\n   * Possible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"xxl\"`. Defaults to `\"md\"`.\n   */\n  @Prop() size: 'sm' | 'md' | 'lg' | 'xl' | 'xxl' = 'md';\n\n  @Prop() variant: 'default' | 'light' | 'outline' | 'ghost' | 'link' = 'default';\n\n  /**\n   * If true, fits button width to its parent width. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) block: boolean = false;\n\n\n  /**\n   * Button selection state.\n   */\n  @Prop({ reflect: true }) selected: boolean = false;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Prop() disabledReason: string = '';\n  /**\n   * Icon which will displayed on button.\n   * Possible values are bootstrap icon names.\n   */\n  @Prop() icon: string;\n\n  /**\n   * Icon position.\n   */\n  @Prop() iconEnd: boolean = false;\n\n  /**\n   * Show loader.\n   */\n  @Prop() showLoader: boolean = false;\n\n  /**\n   * Hyperlink to navigate to on click.\n   */\n  @Prop() href: string;\n\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\n\n  /**\n   * Sets or retrieves the window or frame at which to target content.\n   */\n  @Prop() target: string = '_self';\n\n  /**\n   * On click of button, a CustomEvent 'goat:click' will be triggered.\n   */\n  @Event({ eventName: 'goat:click' }) goatClick: EventEmitter;\n\n\n  @State() hasFocus = false;\n  @State() isActive = false;\n  @State() slotHasContent = false;\n\n  @Element() elm!: HTMLElement;\n  private tabindex?: string | number;\n  private nativeInput?: HTMLButtonElement;\n\n  @Listen('mouseup', { target: 'window' })\n  windowMouseUp() {\n    if (this.isActive)\n      this.isActive = false;\n  }\n\n  @Listen('keyup', { target: 'window' })\n  windowKeyUp(evt) {\n    if (this.isActive && (evt.key == ' '))\n      this.isActive = false;\n  }\n\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  @Method()\n  async triggerClick() {\n    if (this.nativeInput) {\n      this.nativeInput.click();\n    }\n  }\n\n  private getIconSize() {\n    switch (this.size) {\n      case ElementSize.SMALL:\n        return 'sm';\n      case ElementSize.LARGE:\n        return 'md';\n      case ElementSize.X_LARGE:\n        return 'md';\n      case ElementSize.XX_LARGE:\n        return 'lg';\n      default:\n        return 'sm';\n    }\n  }\n\n  private renderIcon = () => {\n    return <goat-icon name={this.icon} size={this.getIconSize()} class='icon inherit' />;\n  };\n\n  private clickHandler = (event: PointerEvent) => {\n    if (!this.disabled && !this.showLoader) {\n      this.goatClick.emit();\n    } else {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n  };\n\n  private blurHandler = () => {\n    this.hasFocus = false;\n  };\n\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  private mouseDownHandler = () => {\n    this.isActive = true;\n  };\n\n  private keyDownHandler = (evt) => {\n    if (evt.key == ' ') {\n      this.isActive = true;\n      this.clickHandler(evt);\n    }\n  };\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // goat-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.slotHasContent = this.elm.hasChildNodes();\n  }\n\n  private renderDisabledReason() {\n    if (this.disabled && this.disabledReason)\n      return <div id={`disabled-reason-${this.gid}`} role='tooltip' class='sr-only'>\n        {this.disabledReason}\n      </div>;\n  }\n\n  render() {\n\n    let NativeElementTag = 'button';\n    if (this.href) {\n      NativeElementTag = 'a';\n    }\n\n    return (<Host has-focus={this.hasFocus} active={this.isActive}>\n      <div class={{\n        button: true,\n        [`size-${this.size}`]: true,\n        block: this.block,\n        [`variant-${this.variant}`]: true,\n        'disabled': this.disabled,\n        'selected': this.selected,\n        'has-focus': this.hasFocus,\n        'active': this.isActive,\n        'has-content': this.slotHasContent,\n        'icon-end': this.iconEnd,\n        'show-loader': this.showLoader,\n      }}>\n        <div class='button-background' />\n        <NativeElementTag\n          class='native-button'\n          tabindex={this.tabindex}\n          href={this.href}\n          target={this.target}\n          ref={input => this.nativeInput = input}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onClick={this.clickHandler}\n          onMouseDown={this.mouseDownHandler}\n          onKeyDown={this.keyDownHandler}\n          aria-describedby={this.disabled && this.disabledReason ? `disabled-reason-${this.gid}` : null}\n          aria-disabled={(this.disabled || this.showLoader) + ''}\n          {...this.configAria}>\n\n          <div class='button-content'>\n            {this.showLoader && <goat-spinner class='spinner inherit' size={this.getIconSize()} />}\n\n            {!this.showLoader && this.icon && this.renderIcon()}\n\n            {!this.showLoader && <div class='slot-container'>\n              <slot />\n            </div>}\n          </div>\n\n        </NativeElementTag>\n        {this.renderDisabledReason()}\n      </div>\n\n    </Host>);\n  }\n\n}\n","const cache: Record<string, string> = {};\r\n\r\n// TODO: prevent duplicated request when rendering multiple icons with same name simultaneously\r\nexport async function fetchIcon(name: string) {\r\n  if (!name) return '';\r\n  if (cache[name]) {\r\n    return cache[name];\r\n  }\r\n  const res = await fetch(`https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/icons/${name}.svg`, {\r\n    method: 'GET',\r\n    mode: 'cors',\r\n    credentials: 'omit',\r\n  });\r\n  cache[name] = await res.text();\r\n  return cache[name];\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.icon {\r\n  line-height: 0;\r\n  color: var(--icon-color, v(--text-primary));\r\n\r\n}\r\n\r\n:host(.inherit) .icon {\r\n  color: inherit;\r\n}\r\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\r\nimport { fetchIcon } from './datasource';\r\n\r\n/**\r\n * @name Icon\r\n * @description Renders a specified icon.\r\n * @example <goat-icon name=\"house\"></goat-icon>\r\n */\r\n@Component({\r\n  tag: 'goat-icon',\r\n  styleUrl: 'icon.scss',\r\n  shadow: true,\r\n})\r\nexport class Icon {\r\n\r\n  @Prop({ reflect: true }) name: string;\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  @State() svg: string = '';\r\n\r\n  async fetchSvg(name: string) {\r\n    if (this.name)\r\n      this.svg = await fetchIcon(name);\r\n  }\r\n\r\n\r\n  @Watch('name')\r\n  async handleNameChange(newValue: string) {\r\n    this.svg = await fetchIcon(newValue);\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    await this.fetchSvg(this.name);\r\n  }\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === 'sm')\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === 'md')\r\n      size = '1.5rem';\r\n    else if (this.size === 'lg')\r\n      size = '1.75rem';\r\n    else if (this.size === 'xl')\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n\r\n  render() {\r\n    const icon = this.svg.replace(/width=\"([^\"]+)\"/, 'width=\"' + this.getSize() + '\"').replace(/height=\"([^\"]+)\"/, 'height=\"' + this.getSize() + '\"');\r\n    return (\r\n      <Host>\r\n        <div innerHTML={icon} class={{ 'icon': true }} />\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  .spinner {\r\n    line-height: 0;\r\n  }\r\n}\r\n\r\n\r\n:host {\r\n  .spinner path {\r\n    fill: v(--text-primary);\r\n  }\r\n}\r\n\r\n\r\n:host(.inherit) {\r\n  .spinner path {\r\n    fill: currentColor;\r\n  }\r\n}\r\n\r\n\r\n@keyframes rainbow {\r\n  0%   {fill:v(--color-brand-primary);}\r\n  16%   {fill:v(--color-brand-secondary);}\r\n  32%   {fill:v(--color-primary);}\r\n  48%  {fill:v(--color-success);}\r\n  64%  {fill:v(--color-warning);}\r\n  80%  {fill:v(--color-error);}\r\n  90% {fill:v(--color-secondary);}\r\n  100% {fill:v(--color-brand-primary);}\r\n}\r\n\r\n:host(.rainbow) .spinner path {\r\n  fill: v(--color-primary);\r\n  animation-name: rainbow;\r\n  animation-duration: 5s;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n","import { Component, h, Host, Prop } from '@stencil/core';\r\nimport { ElementSize } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Spinner\r\n * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.\r\n * @example <goat-spinner class=\"rainbow\"></goat-spinner>\r\n */\r\n@Component({\r\n  tag: 'goat-spinner',\r\n  styleUrl: 'spinner.scss',\r\n  shadow: true,\r\n})\r\nexport class Spinner {\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop() size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === ElementSize.SMALL)\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === ElementSize.MEDIUM)\r\n      size = '1.5rem';\r\n    else if (this.size === ElementSize.LARGE)\r\n      size = '1.75rem';\r\n    else if (this.size === ElementSize.X_LARGE)\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class='spinner'>\r\n          <svg version='1.1' class='loader icon-svg' x='0px' y='0px'\r\n               width={this.getSize()} height={this.getSize()} viewBox='0 0 50 50' fill='currentColor'>\r\n            <path\r\n              d='M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z'>\r\n              <animateTransform attributeType='xml'\r\n                                attributeName='transform'\r\n                                type='rotate'\r\n                                from='0 25 25'\r\n                                to='360 25 25'\r\n                                dur='0.6s'\r\n                                repeatCount='indefinite' />\r\n            </path>\r\n          </svg>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}