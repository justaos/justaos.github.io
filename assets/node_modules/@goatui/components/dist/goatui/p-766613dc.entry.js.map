{"version":3,"sources":["src/components/form/textarea/textarea.scss?tag=goat-textarea&encapsulation=shadow","src/components/form/textarea/textarea.tsx"],"names":["textareaCss","Textarea","this","gid","getComponentIndex","inputHandler","ev","input","target","value","p4Input","emit","p4Change","blurHandler","hasFocus","p4Blur","focusHandler","p4Focus","clearInput","evt","nativeInput","keyDownHandler","key","clearable","[object Object]","focus","blur","debounceEvent","debounce","toString","getValue","length","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","endSlotHasContent","querySelector","debounceChanged","h","Host","has-focus","has-value","hasValue","class","input-container","textarea","disabled","readonly","end-slot-has-content","Object","assign","rows","ref","required","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick"],"mappings":"2GAAA,MAAMA,EAAc,m9KCyBPC,EAAQ,gOAEnBC,KAAAC,IAAcC,IAgINF,KAAAG,aAAgBC,IACtB,MAAMC,EAAQD,EAAGE,OACjB,GAAID,EAAO,CACTL,KAAKO,MAAQF,EAAME,OAAS,GAE9BP,KAAKQ,QAAQC,KAAKL,GAClBJ,KAAKU,SAASD,KAAKL,IAGbJ,KAAAW,YAAeP,IACrBJ,KAAKY,SAAW,MAChBZ,KAAKa,OAAOJ,KAAKL,IAGXJ,KAAAc,aAAgBV,IACtBJ,KAAKY,SAAW,KAChBZ,KAAKe,QAAQN,KAAKL,IAYZJ,KAAAgB,WAAcC,IACpBjB,KAAKkB,YAAYX,MAAQ,GACzBP,KAAKG,aAAac,IAGZjB,KAAAmB,eAAkBf,IACxB,GAAIA,EAAGgB,MAAQ,UAAYpB,KAAKqB,UAAW,CACzCrB,KAAKgB,WAAWZ,eA9JG,cAAcJ,KAAKC,gEAgBS,mBAKR,oBAKG,iBAOgC,wBAMlD,oBAMT,mBAKC,sBAGqC,iBAkErC,6BACS,MAlC7BqB,iBACE,GAAItB,KAAKkB,YAAa,CACpBlB,KAAKkB,YAAYK,QACjBvB,KAAKY,SAAW,MASpBU,gBACE,GAAItB,KAAKkB,YAAa,CACpBlB,KAAKkB,YAAYM,OACjBxB,KAAKY,SAAW,OAKpBU,uBACE,OAAOtB,KAAKC,IAIJqB,kBACRtB,KAAKU,SAAWe,EAAczB,KAAKU,SAAUV,KAAK0B,UA+B5CJ,WACN,OAAQtB,KAAKO,OAAS,IAAIoB,WAGpBL,WACN,OAAOtB,KAAK4B,WAAWC,OAAS,EAclCP,oBAIE,GAAItB,KAAK8B,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWhC,KAAK8B,IAAIG,aAAa,YACvCjC,KAAKgC,SAAWA,IAAa,KAAOA,EAAWE,UAC/ClC,KAAK8B,IAAIK,gBAAgB,YAE3BnC,KAAK8B,IAAIM,oBAAoBC,SAASC,IACpC,GAAIA,EAAKC,SAAS,SAAU,CAC1BvC,KAAKwC,WAAWF,GAAQtC,KAAK8B,IAAIG,aAAaK,GAC9CtC,KAAK8B,IAAIK,gBAAgBG,OAG7BtC,KAAKyC,oBAAsBzC,KAAK8B,IAAIY,cAAc,gBAGpDpB,oBACEtB,KAAK2C,kBAGPrB,SACE,OACEsB,EAACC,EAAI,CAAAC,YAAY9C,KAAKY,SAAQmC,YAAa/C,KAAKgD,YAC9CJ,EAAA,MAAA,CAAKK,MAAO,CACVC,kBAAmB,KACnBC,SAAY,KACZC,SAAYpD,KAAKoD,SACjBC,SAAYrD,KAAKqD,SACjBP,YAAa9C,KAAKY,SAClB0C,uBAAwBtD,KAAKyC,oBAE1BG,EAAA,WAAAW,OAAAC,OAAA,CACEC,KAAM,EACNC,IAAKrD,GAASL,KAAKkB,YAAcb,EACjCsD,SAAU3D,KAAK2D,SACfV,MAAM,qBACNX,KAAMtC,KAAKsC,KACXsB,YAAa5D,KAAK4D,YAClBrD,MAAOP,KAAKO,MACZyB,SAAUhC,KAAKgC,SACf6B,UAAW7D,KAAKmB,eAChB2C,QAAS9D,KAAKG,aACd4D,OAAQ/D,KAAKW,YACbqD,QAAShE,KAAKc,aACdsC,SAAUpD,KAAKoD,UACXpD,KAAKwC,aAEbxC,KAAKqB,WAAarB,KAAKgD,YACtBJ,EAAA,YAAA,CAAWK,MAAM,6BAA6BX,KAAK,gBAAgB2B,QAASjE,KAAKgB,aAEnF4B,EAAA,MAAA,CAAKK,MAAM,sBACTL,EAAA,OAAA,CAAMN,KAAK","sourcesContent":["@import \"../common-input\";\r\n\r\n.textarea {\r\n  height: 100%;\r\n  align-items: flex-start;\r\n\r\n  .input-native {\r\n    height: 100%;\r\n    min-height: 5rem;\r\n    resize: vertical;\r\n  }\r\n}\r\n\r\n\r\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n/**\n * @name Textarea\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>\n */\n@Component({\n  tag: 'goat-textarea',\n  styleUrl: 'textarea.scss',\n  shadow: true,\n})\nexport class Textarea implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * The button size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop( {reflect: true}) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({reflect: true}) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop() required: boolean = false;\n\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n\n  @Prop( {reflect: true, mutable: true}) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) p4Input: EventEmitter;\n\n  /**\n   * Emitted when the value has changed..\n   */\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) p4Blur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) p4Focus: EventEmitter;\n\n  /**\n   * Emitted when the action button is clicked.\n   */\n  @Event({ eventName: 'goat:action-click' }) p4ActionClick: EventEmitter;\n\n  /**\n   * Sets focus on the native `textarea` in `goat-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * Sets blur on the native `textarea` in `goat-textarea`. Use this method instead of the global\n   * `textarea.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\n  }\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLTextAreaElement;\n  private tabindex?: string | number;\n  @State() hasFocus = false;\n  @State() endSlotHasContent = false;\n\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.p4Input.emit(ev as KeyboardEvent);\n    this.p4Change.emit(ev as KeyboardEvent);\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.p4Blur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.p4Focus.emit(ev);\n  };\n\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // ion-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'textarea': true,\n          'disabled': this.disabled,\n          'readonly': this.readonly,\n          'has-focus': this.hasFocus,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n             <textarea\n               rows={4}\n               ref={input => this.nativeInput = input}\n               required={this.required}\n               class='input input-native'\n               name={this.name}\n               placeholder={this.placeholder}\n               value={this.value}\n               tabindex={this.tabindex}\n               onKeyDown={this.keyDownHandler}\n               onInput={this.inputHandler}\n               onBlur={this.blurHandler}\n               onFocus={this.focusHandler}\n               disabled={this.disabled}\n               {...this.configAria}/>\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' onClick={this.clearInput} />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}