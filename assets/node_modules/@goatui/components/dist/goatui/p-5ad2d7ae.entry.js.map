{"version":3,"sources":["src/components/form/date-picker/date-picker.scss?tag=goat-date-picker&encapsulation=shadow","src/components/form/date-picker/date-picker.tsx"],"names":["datePickerCss","DatePicker","this","gid","getComponentIndex","inputHandler","ev","input","target","oldValue","value","goatInput","emit","goatChange","keyDownHandler","key","clearInput","blurHandler","hasFocus","goatBlur","focusHandler","goatFocus","evt","nativeInput","[object Object]","getValue","length","toString","focus","blur","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","h","Host","has-focus","has-value","hasValue","class","input-container","disabled","type","readonly","onKeyDown","onInput","onBlur","onFocus"],"mappings":"oGAAA,MAAMA,EAAgB,k2KCwBTC,EAAU,uLAErBC,KAAAC,IAAcC,IAsHNF,KAAAG,aAAgBC,IACtB,MAAMC,EAAQD,EAAGE,OACjB,MAAMC,EAAWP,KAAKQ,MACtB,GAAIH,EAAO,CACTL,KAAKQ,MAAQH,EAAMG,MAErBR,KAAKS,UAAUC,KAAKN,GACpB,GAAIG,IAAaP,KAAKQ,MAAO,CAC3BR,KAAKW,WAAWD,KAAKN,KAIjBJ,KAAAY,eAAkBR,IACxB,GAAIA,EAAGS,MAAQ,SAAU,CACvBb,KAAKc,WAAWV,KAIZJ,KAAAe,YAAeX,IACrBJ,KAAKgB,SAAW,MAChBhB,KAAKiB,SAASP,KAAKN,IAGbJ,KAAAkB,aAAgBd,IACtBJ,KAAKgB,SAAW,KAChBhB,KAAKmB,UAAUT,KAAKN,IAGdJ,KAAAc,WAAcM,IACpBpB,KAAKqB,YAAYb,MAAQ,GACzBR,KAAKG,aAAaiB,cA/IG,cAAcpB,KAAKC,2CAWU,mBAMP,oBAKA,iBAKa,mBAEA,iBA0BtC,MAEZqB,WACN,OAAOtB,KAAKuB,WAAWC,OAAS,EAG1BF,WACN,OAAQtB,KAAKQ,OAAS,IAAIiB,WAK5BH,uBACE,OAAOtB,KAAKC,IAQdqB,iBACE,GAAItB,KAAKqB,YAAa,CACpBrB,KAAKqB,YAAYK,QACjB1B,KAAKgB,SAAW,MASpBM,gBACE,GAAItB,KAAKqB,YAAa,CACpBrB,KAAKqB,YAAYM,OACjB3B,KAAKgB,SAAW,OAKpBM,oBAIE,GAAItB,KAAK4B,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAW9B,KAAK4B,IAAIG,aAAa,YACvC/B,KAAK8B,SAAWA,IAAa,KAAOA,EAAWE,UAC/ChC,KAAK4B,IAAIK,gBAAgB,YAE3BjC,KAAK4B,IAAIM,oBAAoBC,SAASC,IACpC,GAAIA,EAAKC,SAAS,SAAU,CAC1BrC,KAAKsC,WAAWF,GAAQpC,KAAK4B,IAAIG,aAAaK,GAC9CpC,KAAK4B,IAAIK,gBAAgBG,OAuC/Bd,SACE,OACEiB,EAACC,EAAI,CAAAC,YAAYzC,KAAKgB,SAAQ0B,YACb1C,KAAK2C,YACpBJ,EAAA,MAAA,CAAKK,MAAO,CACVC,kBAAmB,KACnBC,SAAY9C,KAAK8C,SACjBL,YAAazC,KAAKgB,WAElBuB,EAAA,QAAA,CAAOQ,KAAK,OACLjB,SAAU9B,KAAK8B,SACfc,MAAM,qBACNE,SAAU9C,KAAK8C,SACfE,SAAUhD,KAAKgD,SACfC,UAAWjD,KAAKY,eAChBsC,QAASlD,KAAKG,aACdgD,OAAQnD,KAAKe,YACbqC,QAASpD,KAAKkB","sourcesContent":["@import \"../common-input\";\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { getComponentIndex } from '../../../utils/utils';\n\n/**\n * @name Date Picker\n * @description Captures date input.\n * @example <goat-date-picker value='true'></goat-date-picker>\n */\n@Component({\n  tag: 'goat-date-picker',\n  styleUrl: 'date-picker.scss',\n  shadow: true,\n})\nexport class DatePicker implements ComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\n\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: string | number | null = '';\n\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLInputElement;\n  private tabindex?: string | number;\n  @State() hasFocus = false;\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n      this.hasFocus = false;\n    }\n  }\n\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // goat-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n  }\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.goatInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.goatChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      this.clearInput(ev);\n    }\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.goatBlur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.goatFocus.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus}\n            has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'disabled': this.disabled,\n          'has-focus': this.hasFocus,\n        }}>\n          <input type='date'\n                 tabindex={this.tabindex}\n                 class='input input-native'\n                 disabled={this.disabled}\n                 readonly={this.readonly}\n                 onKeyDown={this.keyDownHandler}\n                 onInput={this.inputHandler}\n                 onBlur={this.blurHandler}\n                 onFocus={this.focusHandler}/>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}