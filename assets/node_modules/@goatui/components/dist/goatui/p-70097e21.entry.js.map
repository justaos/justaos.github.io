{"version":3,"sources":["src/components/content/icon/datasource.ts","src/components/content/icon/icon.scss?tag=goat-icon&encapsulation=shadow","src/components/content/icon/icon.tsx","src/components/content/spinner/spinner.scss?tag=goat-spinner&encapsulation=shadow","src/components/content/spinner/spinner.tsx"],"names":["cache","async","fetchIcon","name","res","fetch","method","mode","credentials","text","iconCss","Icon","[object Object]","this","svg","newValue","fetchSvg","size","icon","replace","getSize","h","Host","innerHTML","class","spinnerCss","Spinner","ElementSize","SMALL","MEDIUM","LARGE","X_LARGE","version","x","y","width","height","viewBox","fill","d","attributeType","attributeName","type","from","to","dur","repeatCount"],"mappings":"iFAAA,MAAMA,EAAgC,GAG/BC,eAAeC,EAAUC,GAC9B,IAAKA,EAAM,MAAO,GAClB,GAAIH,EAAMG,GAAO,CACf,OAAOH,EAAMG,GAEf,MAAMC,QAAYC,MAAM,4DAA4DF,QAAY,CAC9FG,OAAQ,MACRC,KAAM,OACNC,YAAa,SAEfR,EAAMG,SAAcC,EAAIK,OACxB,OAAOT,EAAMG,GCdf,MAAMO,EAAU,o1BCaHC,EAAI,6DAQqD,cAE7C,GAEvBC,eAAeT,GACb,GAAIU,KAAKV,KACPU,KAAKC,UAAYZ,EAAUC,GAK/BS,uBAAuBG,GACrBF,KAAKC,UAAYZ,EAAUa,GAG7BH,gCACQC,KAAKG,SAASH,KAAKV,MAGnBS,UACN,IAAIK,EACJ,GAAIJ,KAAKI,OAAS,KAChBA,EAAO,eACJ,IAAKJ,KAAKI,MAAQJ,KAAKI,OAAS,KACnCA,EAAO,cACJ,GAAIJ,KAAKI,OAAS,KACrBA,EAAO,eACJ,GAAIJ,KAAKI,OAAS,KACrBA,EAAO,YAEPA,EAAOJ,KAAKI,KACd,OAAOA,EAITL,SACE,MAAMM,EAAOL,KAAKC,IAAIK,QAAQ,kBAAmB,UAAYN,KAAKO,UAAY,KAAKD,QAAQ,mBAAoB,WAAaN,KAAKO,UAAY,KAC7I,OACEC,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,UAAWL,EAAMM,MAAO,CAAEN,KAAQ,6EC5D/C,MAAMO,EAAa,g6CCaNC,EAAO,yCAMiC,KAE3Cd,UACN,IAAIK,EACJ,GAAIJ,KAAKI,OAASU,EAAYC,MAC5BX,EAAO,eACJ,IAAKJ,KAAKI,MAAQJ,KAAKI,OAASU,EAAYE,OAC/CZ,EAAO,cACJ,GAAIJ,KAAKI,OAASU,EAAYG,MACjCb,EAAO,eACJ,GAAIJ,KAAKI,OAASU,EAAYI,QACjCd,EAAO,YAEPA,EAAOJ,KAAKI,KACd,OAAOA,EAGTL,SACE,OACES,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKG,MAAM,WACTH,EAAA,MAAA,CAAKW,QAAQ,MAAMR,MAAM,kBAAkBS,EAAE,MAAMC,EAAE,MAChDC,MAAOtB,KAAKO,UAAWgB,OAAQvB,KAAKO,UAAWiB,QAAQ,YAAYC,KAAK,gBAC3EjB,EAAA,OAAA,CACEkB,EAAE,+KACFlB,EAAA,mBAAA,CAAkBmB,cAAc,MACdC,cAAc,YACdC,KAAK,SACLC,KAAK,UACLC,GAAG,YACHC,IAAI,OACJC,YAAY","sourcesContent":["const cache: Record<string, string> = {};\r\n\r\n// TODO: prevent duplicated request when rendering multiple icons with same name simultaneously\r\nexport async function fetchIcon(name: string) {\r\n  if (!name) return '';\r\n  if (cache[name]) {\r\n    return cache[name];\r\n  }\r\n  const res = await fetch(`https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/icons/${name}.svg`, {\r\n    method: 'GET',\r\n    mode: 'cors',\r\n    credentials: 'omit',\r\n  });\r\n  cache[name] = await res.text();\r\n  return cache[name];\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.icon {\r\n  line-height: 0;\r\n  color: var(--icon-color, v(--text-primary));\r\n\r\n}\r\n\r\n:host(.inherit) .icon {\r\n  color: inherit;\r\n}\r\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\r\nimport { fetchIcon } from './datasource';\r\n\r\n/**\r\n * @name Icon\r\n * @description Renders a specified icon.\r\n * @example <goat-icon name=\"house\"></goat-icon>\r\n */\r\n@Component({\r\n  tag: 'goat-icon',\r\n  styleUrl: 'icon.scss',\r\n  shadow: true,\r\n})\r\nexport class Icon {\r\n\r\n  @Prop({ reflect: true }) name: string;\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  @State() svg: string = '';\r\n\r\n  async fetchSvg(name: string) {\r\n    if (this.name)\r\n      this.svg = await fetchIcon(name);\r\n  }\r\n\r\n\r\n  @Watch('name')\r\n  async handleNameChange(newValue: string) {\r\n    this.svg = await fetchIcon(newValue);\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    await this.fetchSvg(this.name);\r\n  }\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === 'sm')\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === 'md')\r\n      size = '1.5rem';\r\n    else if (this.size === 'lg')\r\n      size = '1.75rem';\r\n    else if (this.size === 'xl')\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n\r\n  render() {\r\n    const icon = this.svg.replace(/width=\"([^\"]+)\"/, 'width=\"' + this.getSize() + '\"').replace(/height=\"([^\"]+)\"/, 'height=\"' + this.getSize() + '\"');\r\n    return (\r\n      <Host>\r\n        <div innerHTML={icon} class={{ 'icon': true }} />\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  .spinner {\r\n    line-height: 0;\r\n  }\r\n}\r\n\r\n\r\n:host {\r\n  .spinner path {\r\n    fill: v(--text-primary);\r\n  }\r\n}\r\n\r\n\r\n:host(.inherit) {\r\n  .spinner path {\r\n    fill: currentColor;\r\n  }\r\n}\r\n\r\n\r\n@keyframes rainbow {\r\n  0%   {fill:v(--color-brand-primary);}\r\n  16%   {fill:v(--color-brand-secondary);}\r\n  32%   {fill:v(--color-primary);}\r\n  48%  {fill:v(--color-success);}\r\n  64%  {fill:v(--color-warning);}\r\n  80%  {fill:v(--color-error);}\r\n  90% {fill:v(--color-secondary);}\r\n  100% {fill:v(--color-brand-primary);}\r\n}\r\n\r\n:host(.rainbow) .spinner path {\r\n  fill: v(--color-primary);\r\n  animation-name: rainbow;\r\n  animation-duration: 5s;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n","import { Component, h, Host, Prop } from '@stencil/core';\r\nimport { ElementSize } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Spinner\r\n * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.\r\n * @example <goat-spinner class=\"rainbow\"></goat-spinner>\r\n */\r\n@Component({\r\n  tag: 'goat-spinner',\r\n  styleUrl: 'spinner.scss',\r\n  shadow: true,\r\n})\r\nexport class Spinner {\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop() size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === ElementSize.SMALL)\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === ElementSize.MEDIUM)\r\n      size = '1.5rem';\r\n    else if (this.size === ElementSize.LARGE)\r\n      size = '1.75rem';\r\n    else if (this.size === ElementSize.X_LARGE)\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class='spinner'>\r\n          <svg version='1.1' class='loader icon-svg' x='0px' y='0px'\r\n               width={this.getSize()} height={this.getSize()} viewBox='0 0 50 50' fill='currentColor'>\r\n            <path\r\n              d='M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z'>\r\n              <animateTransform attributeType='xml'\r\n                                attributeName='transform'\r\n                                type='rotate'\r\n                                from='0 25 25'\r\n                                to='360 25 25'\r\n                                dur='0.6s'\r\n                                repeatCount='indefinite' />\r\n            </path>\r\n          </svg>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}