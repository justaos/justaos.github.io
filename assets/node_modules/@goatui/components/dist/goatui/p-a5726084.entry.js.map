{"version":3,"sources":["src/components/flow-designer/canvas/canvas.scss?tag=goat-canvas&encapsulation=shadow","src/components/flow-designer/canvas/canvas.tsx"],"names":["canvasCss","Canvas","this","drawingArea","minX","minY","maxX","maxY","_Canvas_createStartString","set","point","updateDrawingArea","x","unitSize","y","_Canvas_createQuadraticCurveString","pointA","pointB","_Canvas_createLineString","width","height","[object Object]","setTimeout","renderCanvas","line","lines","drawLine","computedViewbox","calculateViewbox","paths","result","viewbox","split","parseInt","padding","startConnector","start","gap","direction","endConnector","end","pathString","__classPrivateFieldGet","call","type","createStraightLinePath","createShapeConnectorPath","push","join","curveSize","position","console","log","h","Host","class","style","background-size","background-position","viewBox","map","path","stroke-width","stroke-linecap","stroke-linejoin","stroke","d","fill"],"mappings":"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","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.canvas-wrapper {\r\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='8d8d8d' class='bi bi-dot' viewBox='0 0 16 16'%3E%3Cpath d='M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z'/%3E%3C/svg%3E\");\r\n  width: max-content;\r\n}\r\n\r\n.line {\r\n  stroke: v(--border-color);\r\n\r\n  &.clickable {\r\n    cursor: pointer;\r\n    &:hover {\r\n      stroke: v(--color-primary);\r\n    }\r\n    z-index: 1;\r\n  }\r\n}\r\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'goat-canvas',\r\n  styleUrl: 'canvas.scss',\r\n  shadow: true,\r\n})\r\nexport class Canvas {\r\n\r\n  @Prop() unitSize: number = 16;\r\n  @Prop() lines: any[] = [];\r\n  @Prop() padding: number = 2;\r\n\r\n  @Prop() viewbox?: string;\r\n\r\n  private drawingArea = {\r\n    minX: 0,\r\n    minY: 0,\r\n    maxX: 0,\r\n    maxY: 0,\r\n  };\r\n\r\n  @State() computedViewbox = {\r\n    x: 0,\r\n    y: 0,\r\n    width: 0,\r\n    height: 0,\r\n  };\r\n\r\n  @State() paths: string[] = [];\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n\r\n  componentDidLoad() {\r\n    setTimeout(() => {\r\n      this.renderCanvas();\r\n    });\r\n  }\r\n\r\n  renderCanvas() {\r\n\r\n    for (const line of this.lines) {\r\n      this.drawLine(line);\r\n    }\r\n\r\n    this.computedViewbox = this.calculateViewbox();\r\n    this.paths = [...this.paths];\r\n  }\r\n\r\n  calculateViewbox() {\r\n    let result;\r\n    if (this.viewbox) {\r\n      const viewbox = this.viewbox.split(' ');\r\n      result = {\r\n        x: parseInt(viewbox[0], 10),\r\n        y: parseInt(viewbox[1], 10),\r\n        width: parseInt(viewbox[2], 10),\r\n        height: parseInt(viewbox[3], 10),\r\n      };\r\n    } else {\r\n      result = {\r\n        x: this.drawingArea.minX,\r\n        y: this.drawingArea.minY,\r\n        width: (this.drawingArea.maxX - this.drawingArea.minX),\r\n        height: (this.drawingArea.maxY - this.drawingArea.minY),\r\n      };\r\n    }\r\n\r\n    if (this.padding) {\r\n      result.x -= this.padding;\r\n      result.y -= this.padding;\r\n      result.width += 2 * this.padding;\r\n      result.height += 2 * this.padding;\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  drawLine(line) {\r\n\r\n    const startConnector = {\r\n      x: line.start.x,\r\n      y: line.start.y,\r\n    };\r\n    if (line.start.gap) {\r\n      if (line.start.direction == 'down') {\r\n        startConnector.y += line.start.gap;\r\n      } else if (line.start.direction == 'up') {\r\n        startConnector.y -= line.start.gap;\r\n      } else if (line.start.direction == 'right') {\r\n        startConnector.x += line.start.gap;\r\n      } else if (line.start.direction == 'left') {\r\n        startConnector.x -= line.start.gap;\r\n      }\r\n    }\r\n\r\n    const endConnector = {\r\n      x: line.end.x,\r\n      y: line.end.y,\r\n    };\r\n\r\n    if (line.end.gap) {\r\n      if (line.end.direction == 'down') {\r\n        endConnector.y += line.end.gap;\r\n      } else if (line.end.direction == 'top') {\r\n        endConnector.y -= line.end.gap;\r\n      } else if (line.end.direction == 'right') {\r\n        endConnector.x += line.end.gap;\r\n      } else if (line.end.direction == 'left') {\r\n        endConnector.x -= line.end.gap;\r\n      }\r\n    }\r\n\r\n    let pathString = this.#createStartString(line.start);\r\n\r\n    /**\r\n     * Straight line between two connectors\r\n     */\r\n    if (!line.type || line.type == 'straight_line') {\r\n      pathString += this.createStraightLinePath(line, startConnector, endConnector);\r\n    }\r\n\r\n    if (line.type == 'shape_connector') {\r\n      pathString += this.createShapeConnectorPath(line, startConnector, endConnector);\r\n    }\r\n\r\n\r\n    this.updateDrawingArea(line.start);\r\n    this.updateDrawingArea(line.end);\r\n\r\n    this.paths.push(pathString);\r\n\r\n  }\r\n\r\n  createStraightLinePath(line, startConnector, endConnector) {\r\n    let pathString = [];\r\n    pathString.push(this.#createLineString(startConnector));\r\n    pathString.push(this.#createLineString(endConnector));\r\n    pathString.push(this.#createLineString(line.end));\r\n    return ` ${pathString.join(' ')}`;\r\n  }\r\n\r\n  createShapeConnectorPath(line, startConnector, endConnector) {\r\n\r\n    let pathString = [];\r\n    let curveSize = 2;\r\n\r\n    if (line.start.direction == 'down') {\r\n      if (line.end.direction == 'top') {\r\n        if (startConnector.x === endConnector.x) {\r\n          pathString.push(this.#createLineString(line.end));\r\n        } else if (startConnector.x < endConnector.x) {\r\n          pathString.push(this.#createLineString({ x: startConnector.x, y: startConnector.y - curveSize }));\r\n          pathString.push(this.#createQuadraticCurveString({ x: startConnector.x, y: startConnector.y },\r\n            { x: startConnector.x + curveSize, y: startConnector.y }));\r\n\r\n          pathString.push(this.#createLineString({ x: endConnector.x - curveSize, y: startConnector.y }));\r\n          pathString.push(this.#createQuadraticCurveString({ x: endConnector.x, y: startConnector.y },\r\n            { x: endConnector.x, y: startConnector.y + curveSize }));\r\n          pathString.push(this.#createLineString(line.end));\r\n        } else {\r\n          pathString.push(this.#createLineString({ x: startConnector.x, y: startConnector.y - curveSize }));\r\n          pathString.push(this.#createQuadraticCurveString({ x: startConnector.x, y: startConnector.y },\r\n            { x: startConnector.x - curveSize, y: startConnector.y }));\r\n\r\n          pathString.push(this.#createLineString({ x: endConnector.x + curveSize, y: startConnector.y }));\r\n          pathString.push(this.#createQuadraticCurveString({ x: endConnector.x, y: startConnector.y },\r\n            { x: endConnector.x, y: startConnector.y + curveSize }));\r\n          pathString.push(this.#createLineString(line.end));\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    /*if (startConnector.x === endConnector.x) {\r\n      pathString.push(this.#createLineString(endConnector));\r\n    } else {\r\n      if (line.start.direction === 'down' && line.end.direction === 'left') {\r\n        if (startConnector.y < endConnector.y) {\r\n          pathString += ` ${this.#createLineString({ x: startConnector.x, y: endConnector.y })}`;\r\n        } else {\r\n          pathString += ` ${this.#createLineString({ x: endConnector.x, y: startConnector.y })}`;\r\n        }\r\n      }\r\n      pathString += ` ${this.#createLineString(endConnector)}`;\r\n    }*/\r\n    return ` ${pathString.join(' ')}`;\r\n  }\r\n\r\n\r\n  updateDrawingArea(position) {\r\n    if (position.x > this.drawingArea.maxX) {\r\n      this.drawingArea.maxX = position.x;\r\n    }\r\n    if (position.y > this.drawingArea.maxY) {\r\n      this.drawingArea.maxY = position.y;\r\n    }\r\n    if (position.x < this.drawingArea.minX) {\r\n      this.drawingArea.minX = position.x;\r\n    }\r\n    if (position.y < this.drawingArea.minY) {\r\n      this.drawingArea.minY = position.y;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(`Canvas size ${this.computedViewbox.x * this.unitSize} ${this.computedViewbox.x * this.unitSize} ${this.computedViewbox.width * this.unitSize} ${this.computedViewbox.height * this.unitSize}`);\r\n    return <Host>\r\n      <div class='canvas-wrapper' style={{\r\n        'background-size': `${this.unitSize}px ${this.unitSize}px`,\r\n        'background-position': `${this.unitSize / 2}px ${this.unitSize / 2}px`,\r\n      }}>\r\n\r\n        <svg class='canvas'\r\n             height={`100%`}\r\n             width={`100%`}\r\n             viewBox={`${this.computedViewbox.x * this.unitSize} ${this.computedViewbox.x * this.unitSize} ${this.computedViewbox.width * this.unitSize} ${this.computedViewbox.height * this.unitSize}`}>\r\n          {\r\n            (this.paths.map((path) => {\r\n              return <path class='line clickable'\r\n                           stroke-width='4'\r\n                           stroke-linecap='round'\r\n                           stroke-linejoin='round'\r\n                           stroke='#000'\r\n                           d={`${path}`}\r\n                           fill='none' />;\r\n            }))\r\n          }\r\n        </svg>\r\n      </div>\r\n    </Host>;\r\n  }\r\n\r\n  #createStartString: any = (point) => {\r\n    this.updateDrawingArea(point);\r\n    return `M${point.x * this.unitSize} ${point.y * this.unitSize}`;\r\n  };\r\n\r\n  #createQuadraticCurveString: any = (pointA, pointB) => {\r\n    this.updateDrawingArea(pointA);\r\n    this.updateDrawingArea(pointA);\r\n    return `Q ${pointA.x * this.unitSize} ${pointA.y * this.unitSize} ${pointB.x * this.unitSize} ${pointB.y * this.unitSize}`;\r\n  };\r\n\r\n  #createLineString: any = (point) => {\r\n    this.updateDrawingArea(point);\r\n    return `L${point.x * this.unitSize} ${point.y * this.unitSize}`;\r\n  };\r\n\r\n}\r\n"]}