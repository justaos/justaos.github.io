'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$3 = require('./index-b8774bee.js');
const index = require('./index-cdcc455a.js');
const index$1 = require('./index-2ce866e5.js');
const index$2 = require('./index-eac73f27.js');

var MILLISECONDS_IN_HOUR = 3600000;
/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the hours added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */

function addHours(dirtyDate, dirtyAmount) {
  index.requiredArgs(2, arguments);
  var amount = index$1.toInteger(dirtyAmount);
  return index$1.addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;

  index.requiredArgs(1, arguments);
  var defaultOptions = index$1.getDefaultOptions();
  var weekStartsOn = index$1.toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = index.toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

var MILLISECONDS_IN_DAY = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */

function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  index.requiredArgs(2, arguments);
  var startOfDayLeft = index$2.startOfDay(dirtyDateLeft);
  var startOfDayRight = index$2.startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - index$1.getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - index$1.getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)

  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.

function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}
/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full days according to the local timezone
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
//=> 92
 */


function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  index.requiredArgs(2, arguments);
  var dateLeft = index.toDate(dirtyDateLeft);
  var dateRight = index.toDate(dirtyDateRight);
  var sign = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value

  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero

  return result === 0 ? 0 : result;
}

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  index.requiredArgs(1, arguments);
  var date = index.toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;

  index.requiredArgs(1, arguments);
  var defaultOptions = index$1.getDefaultOptions();
  var weekStartsOn = index$1.toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = index.toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

/*
 *
 */
function calculateWeekRange(date, weekStartsOn = 1) {
  const startDate = startOfWeek(date, { weekStartsOn });
  const endDate = endOfWeek(date, { weekStartsOn });
  return {
    startDate,
    endDate,
    totalDays: 7,
  };
}

var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ColumnEventManager_events;
class ColumnEventManager {
  constructor() {
    _ColumnEventManager_events.set(this, []);
  }
  addEvents(events) {
    __classPrivateFieldSet(this, _ColumnEventManager_events, __classPrivateFieldGet(this, _ColumnEventManager_events, "f").concat(events), "f");
  }
  getEvents() {
    return __classPrivateFieldGet(this, _ColumnEventManager_events, "f");
  }
}
_ColumnEventManager_events = new WeakMap();

const columnViewCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:var(--scrollbar-width, 0.75rem);height:var(--scrollbar-width, 0.75rem)}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}:host{display:block;height:100%;--calendar-border-color:var(--ui-04, var(--color-gray-50, #8d8d8d));--scale-size:3rem;--scale-color:var(--text-placeholder, var(--color-gray-40, #a8a8a8))}.scale{width:var(--scale-size)}.calendar-column-view{display:flex;flex-direction:column;height:100%}.calendar-column-view .view-header{border-top:1px solid var(--border-color, var(--color-gray-50, #8d8d8d));display:flex}.calendar-column-view .view-header .scale{border-bottom:1px solid var(--scale-color, );border-right:1px solid var(--scale-color, )}.calendar-column-view .view-header .columns{display:flex;flex:1;border-bottom:1px solid var(--scale-color, )}.calendar-column-view .view-header .columns .column{flex:1;border-right:1px solid var(--scale-color, )}.calendar-column-view .view-header .columns .column .column-content{display:flex;border-top:0.5rem solid transparent;align-items:center;padding:0.5rem;gap:0.5rem}.calendar-column-view .view-header .columns .column.today .column-content{border-top-color:var(--color-primary, var(--color-blue-60, #0f62fe))}.calendar-column-view .view-header .columns .column.today .column-content .date{color:var(--color-primary, var(--color-blue-60, #0f62fe))}.calendar-column-view .view-header .columns .column .date{font-size:2rem;cursor:pointer;border-radius:100%;padding:0.5rem}.calendar-column-view .view-header .columns .column .date:hover{background:var(--color-primary-30, var(--color-blue-30, #a6c8ff))}.calendar-column-view .view-header .columns .column .day{font-size:1rem}.calendar-column-view .view-header .scrollbar-placeholder{width:var(--scrollbar-width)}.calendar-column-view .view-body{height:100%;border-bottom:1px solid var(--calendar-border-color, );overflow-y:scroll}.calendar-column-view .view-body .view-body-scroll{display:flex;position:relative}.calendar-column-view .view-body .view-body-scroll .scale{border-right:1px solid var(--scale-color, )}.calendar-column-view .view-body .view-body-scroll .scale .row{width:0;position:relative;height:2rem;border-bottom:1px dashed var(--scale-color, )}.calendar-column-view .view-body .view-body-scroll .scale .row.hour{border-bottom:1px solid var(--scale-color, );width:50%;margin-inline-start:50%}.calendar-column-view .view-body .view-body-scroll .scale .row:last-child{border-bottom:0}.calendar-column-view .view-body .view-body-scroll .scale .row .time{position:absolute;top:-0.5rem;font-size:0.75rem}.calendar-column-view .view-body .view-body-scroll .drawing-area{flex:1}.calendar-column-view .view-body .view-body-scroll .drawing-area .events-container{position:absolute;top:0;left:var(--scale-size);width:calc(100% - var(--scale-size));height:100%;display:flex}.calendar-column-view .view-body .view-body-scroll .drawing-area .events-container .column{flex:1;padding:0 1rem 0 1px}.calendar-column-view .view-body .view-body-scroll .drawing-area .events-container .column .column-content{position:relative;height:100%}.calendar-column-view .view-body .view-body-scroll .drawing-area .events-container .column .event{background:var(--color-primary-20, var(--color-blue-20, #d0e2ff));border-left:0.35rem solid var(--color-primary, var(--color-blue-60, #0f62fe));border-radius:3px;position:absolute}.calendar-column-view .view-body .view-body-scroll .drawing-area .events-container .column .event .event-title{padding:0.25rem}.calendar-column-view .view-body .view-body-scroll .current-time-line{position:absolute;z-index:100;pointer-events:none;width:calc(100% - var(--scale-size));margin-inline-start:var(--scale-size)}.calendar-column-view .view-body .view-body-scroll .current-time-line .time{position:absolute;font-size:0.5rem;font-weight:600;color:var(--color-primary, var(--color-blue-60, #0f62fe));top:-6px;left:-3rem;background:var(--color-primary-10, var(--color-blue-10, #edf5ff));padding:2px;border-radius:3px}.calendar-column-view .view-body .view-body-scroll .current-time-line .dash-line{position:absolute;left:0;border-bottom:1px dashed var(--color-primary, var(--color-blue-60, #0f62fe))}.calendar-column-view .view-body .view-body-scroll .current-time-line .dot{border-radius:100%;width:0.5rem;height:0.5rem;background:var(--color-primary, var(--color-blue-60, #0f62fe));display:block;position:absolute;top:-0.25rem}.calendar-column-view .view-body .view-body-scroll .current-time-line .line{border-bottom:2px solid var(--color-primary, var(--color-blue-60, #0f62fe));position:absolute;top:-1px}";

const CalendarColumnView = class {
  constructor(hostRef) {
    index$3.registerInstance(this, hostRef);
    this.singleDayEvents = {};
    this.events = [];
    this.view = 'week';
    this.days = 7;
    this.currentTime = undefined;
    this.contextDate = undefined;
  }
  async componentWillLoad() {
    this.manager = new ColumnEventManager();
    this.manager.addEvents(this.events);
  }
  async componentDidLoad() {
    const viewBodyHeight = this.elm.shadowRoot.querySelector('.view-body').scrollHeight;
    this.elm.shadowRoot.querySelector('.view-body').scroll({ top: (this.getTimePercent(this.currentTime) / 100) * viewBodyHeight - 150 });
  }
  renderHeader() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate); differenceInDays(index$2.startOfDay(this.dateRange.endDate), i) >= 0; i = index$1.addDays(i, 1)) {
      const cls = ['column'];
      const diff = differenceInDays(index$2.startOfDay(i), index$2.startOfDay(this.currentTime));
      if (diff === 0)
        cls.push('today');
      else if (diff < 0)
        cls.push('past');
      else if (diff < 0)
        cls.push('future');
      columns.push(index$3.h("div", { class: cls.join(' ') }, index$3.h("div", { class: 'column-content' }, index$3.h("div", { class: 'date', onClick: () => {
          alert('date clicked');
        } }, index$1.format(i, 'dd')), index$3.h("div", { class: 'day' }, index$1.format(i, 'E')))));
    }
    return columns;
  }
  renderBackgroundColumns() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate); differenceInDays(index$2.startOfDay(this.dateRange.endDate), i) >= 0; i = index$1.addDays(i, 1)) {
      const cls = ['column'];
      if (index$2.isEqual(index$2.startOfDay(i), index$2.startOfDay(this.currentTime)))
        cls.push('active');
      columns.push(index$3.h("div", { class: cls.join(' ') }));
    }
    return columns;
  }
  renderBodyBackground() {
    const rows = [];
    for (let i = 0; i < 48; i++) { // @TODO: parameterize number of column, currently rendering 24 hours
      const cls = ['row'];
      if (i % 2)
        cls.push('hour');
      const row = index$3.h("div", { class: cls.join(' ') }, this.renderBackgroundColumns());
      rows.push(row);
    }
    return index$3.h("div", { class: 'background' }, rows);
  }
  renderScale() {
    const rows = [];
    for (let i = 0; i < 48; i++) { // @TODO: parameterize number of column, currently rendering 24 hours
      const cls = ['row'];
      if (i % 2)
        cls.push('hour');
      const startTime = index$2.startOfDay(new Date());
      const row = index$3.h("div", { class: cls.join(' ') }, (() => {
        if (i % 2 == 0 && i) {
          return index$3.h("div", { class: 'time' }, index$1.format(addHours(startTime, i / 2), 'hh a'));
        }
      })());
      rows.push(row);
    }
    return index$3.h("div", { class: 'background' }, rows);
  }
  renderEvents() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate), j = 0; differenceInDays(index$2.startOfDay(this.dateRange.endDate), i) >= 0; i = index$1.addDays(i, 1), j++) {
      const cls = ['column'];
      if (index$2.isEqual(index$2.startOfDay(i), index$2.startOfDay(this.currentTime)))
        cls.push('active');
      columns.push(index$3.h("div", { class: cls.join(' ') }, index$3.h("div", { class: 'column-content' }, (() => {
        /*if (this.eventDays[format(startOfDay(i), 'dd-MM-yyyy')]) {
          const eventDay = this.eventDays[format(startOfDay(i), 'dd-MM-yyyy')];
          const columnsLength = eventDay.length;
          return eventDay.map((nodes, columnIndex) => {
            return nodes.map((node) => {
              return <div class='event' style={{
                top: `${this.getTimePercent(node.event.start, startOfDay(i))}%`,
                height: `${this.getTimePercent(node.event.end, startOfDay(i)) - this.getTimePercent(node.event.start, startOfDay(i))}%`,
                left: `${columnIndex / columnsLength * 100}%`,
                width: `calc(${(1 * node.width) / columnsLength * 100}% - 1px)`,
              }}>
                <div class='event-title'>{node.event.title || '(no title)'}</div>
              </div>;
            });
          });
        }*/
      })())));
    }
    return index$3.h("div", { class: 'events-container' }, columns);
  }
  getDatePercent() {
    const currentDay = differenceInDays(index$2.startOfDay(this.currentTime), this.dateRange.startDate);
    return (currentDay / this.dateRange.totalDays) * 100;
  }
  getTimePercent(time, forDay) {
    if (!forDay)
      forDay = time;
    const startDate = index$2.startOfDay(forDay);
    const endDate = endOfDay(forDay);
    const percent = (time.valueOf() - startDate.valueOf()) / (endDate.valueOf() - startDate.valueOf()) * 100;
    if (percent < 0)
      return 0;
    if (percent > 100)
      return 100;
    return percent;
  }
  render() {
    if (this.view === 'week') {
      this.dateRange = calculateWeekRange(this.contextDate, 1);
    }
    else {
      this.dateRange.startDate = index$2.startOfDay(this.contextDate);
      this.dateRange.endDate = endOfDay(index$1.addDays(this.contextDate, this.days - 1));
      this.dateRange.totalDays = this.days;
    }
    return index$3.h("div", { class: 'calendar-column-view' }, index$3.h("div", { class: 'view-header' }, index$3.h("div", { class: 'scale' }), index$3.h("div", { class: 'columns' }, this.renderHeader()), index$3.h("div", { class: 'scrollbar-placeholder' })), index$3.h("div", { class: 'view-body' }, index$3.h("div", { class: 'view-body-scroll' }, index$3.h("div", { class: 'scale' }, this.renderScale()), index$3.h("div", { class: 'drawing-area' }, index$3.h("goat-calendar-column-view-background", { columns: this.dateRange.totalDays }), this.renderEvents()), (() => {
      if (this.currentTime.valueOf() > this.dateRange.startDate.valueOf() - 1 && this.currentTime.valueOf() < this.dateRange.endDate.valueOf() + 1) {
        return index$3.h("div", { class: 'current-time-line', style: { top: `calc(${this.getTimePercent(this.currentTime)}% - 1px)` } }, index$3.h("div", { class: 'time' }, index$1.format(this.contextDate, 'hh:mm a')), index$3.h("div", { class: 'dash-line', style: { width: `${this.getDatePercent()}%` } }), index$3.h("div", { class: 'dot', style: { 'left': `calc( ${this.getDatePercent()}% - 0.25rem)` } }), index$3.h("div", { class: 'line', style: {
            'left': `${this.getDatePercent()}%`,
            width: `${(1 / this.dateRange.totalDays) * 100}%`,
          } }));
      }
    })())));
  }
  get elm() { return index$3.getElement(this); }
};
CalendarColumnView.style = columnViewCss;

exports.goat_calendar_column_view = CalendarColumnView;

//# sourceMappingURL=goat-calendar-column-view.cjs.entry.js.map