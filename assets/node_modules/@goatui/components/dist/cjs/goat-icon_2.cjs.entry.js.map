{"file":"goat-icon.goat-spinner.entry.cjs.js","mappings":"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","names":["h","Host","ElementSize"],"sources":["./src/components/content/icon/datasource.ts","./src/components/content/icon/icon.scss?tag=goat-icon&encapsulation=shadow","./src/components/content/icon/icon.tsx","./src/components/content/spinner/spinner.scss?tag=goat-spinner&encapsulation=shadow","./src/components/content/spinner/spinner.tsx"],"sourcesContent":["const cache: Record<string, string> = {};\r\n\r\n// TODO: prevent duplicated request when rendering multiple icons with same name simultaneously\r\nexport async function fetchIcon(name: string) {\r\n  if (!name) return '';\r\n  if (cache[name]) {\r\n    return cache[name];\r\n  }\r\n  const res = await fetch(`https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/icons/${name}.svg`, {\r\n    method: 'GET',\r\n    mode: 'cors',\r\n    credentials: 'omit',\r\n  });\r\n  cache[name] = await res.text();\r\n  return cache[name];\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.icon {\r\n  line-height: 0;\r\n  color: var(--icon-color, v(--text-primary));\r\n\r\n}\r\n\r\n:host(.inherit) .icon {\r\n  color: inherit;\r\n}\r\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\r\nimport { fetchIcon } from './datasource';\r\n\r\n/**\r\n * @name Icon\r\n * @description Renders a specified icon.\r\n * @example <goat-icon name=\"house\"></goat-icon>\r\n */\r\n@Component({\r\n  tag: 'goat-icon',\r\n  styleUrl: 'icon.scss',\r\n  shadow: true,\r\n})\r\nexport class Icon {\r\n\r\n  @Prop({ reflect: true }) name: string;\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  @State() svg: string = '';\r\n\r\n  async fetchSvg(name: string) {\r\n    if (this.name)\r\n      this.svg = await fetchIcon(name);\r\n  }\r\n\r\n\r\n  @Watch('name')\r\n  async handleNameChange(newValue: string) {\r\n    this.svg = await fetchIcon(newValue);\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    await this.fetchSvg(this.name);\r\n  }\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === 'sm')\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === 'md')\r\n      size = '1.5rem';\r\n    else if (this.size === 'lg')\r\n      size = '1.75rem';\r\n    else if (this.size === 'xl')\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n\r\n  render() {\r\n    const icon = this.svg.replace(/width=\"([^\"]+)\"/, 'width=\"' + this.getSize() + '\"').replace(/height=\"([^\"]+)\"/, 'height=\"' + this.getSize() + '\"');\r\n    return (\r\n      <Host>\r\n        <div innerHTML={icon} class={{ 'icon': true }} />\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  .spinner {\r\n    line-height: 0;\r\n  }\r\n}\r\n\r\n\r\n:host {\r\n  .spinner path {\r\n    fill: v(--text-primary);\r\n  }\r\n}\r\n\r\n\r\n:host(.inherit) {\r\n  .spinner path {\r\n    fill: currentColor;\r\n  }\r\n}\r\n\r\n\r\n@keyframes rainbow {\r\n  0%   {fill:v(--color-brand-primary);}\r\n  16%   {fill:v(--color-brand-secondary);}\r\n  32%   {fill:v(--color-primary);}\r\n  48%  {fill:v(--color-success);}\r\n  64%  {fill:v(--color-warning);}\r\n  80%  {fill:v(--color-error);}\r\n  90% {fill:v(--color-secondary);}\r\n  100% {fill:v(--color-brand-primary);}\r\n}\r\n\r\n:host(.rainbow) .spinner path {\r\n  fill: v(--color-primary);\r\n  animation-name: rainbow;\r\n  animation-duration: 5s;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n","import { Component, h, Host, Prop } from '@stencil/core';\r\nimport { ElementSize } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Spinner\r\n * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.\r\n * @example <goat-spinner class=\"rainbow\"></goat-spinner>\r\n */\r\n@Component({\r\n  tag: 'goat-spinner',\r\n  styleUrl: 'spinner.scss',\r\n  shadow: true,\r\n})\r\nexport class Spinner {\r\n\r\n  /**\r\n   * The Icon size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`.\r\n   */\r\n  @Prop() size: 'sm' | 'md' | 'lg' | 'xl' | string = 'md';\r\n\r\n  private getSize() {\r\n    let size;\r\n    if (this.size === ElementSize.SMALL)\r\n      size = '1.25rem';\r\n    else if (!this.size || this.size === ElementSize.MEDIUM)\r\n      size = '1.5rem';\r\n    else if (this.size === ElementSize.LARGE)\r\n      size = '1.75rem';\r\n    else if (this.size === ElementSize.X_LARGE)\r\n      size = '2rem';\r\n    else\r\n      size = this.size;\r\n    return size;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class='spinner'>\r\n          <svg version='1.1' class='loader icon-svg' x='0px' y='0px'\r\n               width={this.getSize()} height={this.getSize()} viewBox='0 0 50 50' fill='currentColor'>\r\n            <path\r\n              d='M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z'>\r\n              <animateTransform attributeType='xml'\r\n                                attributeName='transform'\r\n                                type='rotate'\r\n                                from='0 25 25'\r\n                                to='360 25 25'\r\n                                dur='0.6s'\r\n                                repeatCount='indefinite' />\r\n            </path>\r\n          </svg>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}