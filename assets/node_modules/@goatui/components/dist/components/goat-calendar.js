import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$d } from './button.js';
import { a as addDays, f as format, d as defineCustomElement$c } from './column-view.js';
import { d as defineCustomElement$b } from './column-view-background.js';
import { d as defineCustomElement$a } from './empty-state.js';
import { d as defineCustomElement$9 } from './icon.js';
import { d as defineCustomElement$8 } from './menu.js';
import { d as defineCustomElement$7 } from './menu-item.js';
import { d as defineCustomElement$6 } from './select.js';
import { d as defineCustomElement$5 } from './spinner.js';
import { d as defineCustomElement$4 } from './svg.js';
import { d as defineCustomElement$3 } from './tag.js';
import { d as defineCustomElement$2 } from './text.js';

const calendarCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:var(--scrollbar-width, 0.75rem);height:var(--scrollbar-width, 0.75rem)}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}:host{display:block;height:100%;min-height:20em;--calendar-border-color:var(--ui-04, var(--color-gray-50, #8d8d8d));--scale-color:var(--text-placeholder, var(--color-gray-40, #a8a8a8))}.calendar{height:100%;display:flex;flex-direction:column}.calendar .calendar-header .calendar-header-classic{display:flex;padding:1rem}.calendar .calendar-header .calendar-header-classic .header-left{display:flex;gap:1rem;flex:1}.calendar .calendar-header .calendar-header-classic .header-left .title{display:flex;align-items:center}.calendar .calendar-header goat-select{margin-bottom:0}.calendar .calendar-body{flex:1;overflow:auto}.calendar .calendar-body .view-container{height:100%}";

const Calendar = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.events = [];
    this.availableViews = [{ label: 'Day', value: 'day', type: 'column', days: 1 }, {
        label: 'Week',
        value: 'week',
        type: 'column',
        days: 7,
      }, {
        label: 'Month',
        value: 'month',
        type: 'month',
      }];
    this.view = 'week';
    this.showLoader = false;
    this.timezone = undefined;
    this.contextDate = undefined;
  }
  async componentWillLoad() {
    console.log(this.view);
    if (this.timezone) {
      this.currentTime = new Date(new Date().toLocaleString('en', { timeZone: this.timezone }));
    }
    else {
      this.currentTime = new Date();
    }
    if (!this.contextDate) {
      this.contextDate = this.currentTime;
    }
  }
  renderCalendarView() {
    this.currentView = this.availableViews.find((view) => {
      return view.value === this.view;
    });
    if (!this.currentView)
      return 'Invalid view';
    if (this.currentView.type === 'column') {
      return h("goat-calendar-column-view", { currentTime: this.currentTime, contextDate: this.contextDate, events: [] /*generateEvents()*/ });
    }
  }
  renderHeader() {
    return h("div", { class: 'calendar-header-classic' }, h("div", { class: 'header-left' }, h("goat-button", { variant: 'outline', size: 'sm', class: 'color-secondary', onClick: () => {
        this.contextDate = this.currentTime;
      } }, "Today"), h("goat-button", { variant: 'ghost', size: 'sm', class: 'color-secondary', icon: 'chevron-left', onClick: () => {
        this.contextDate = addDays(this.contextDate, -7);
      } }), h("goat-button", { variant: 'ghost', size: 'sm', class: 'color-secondary', icon: 'chevron-right', onClick: () => {
        this.contextDate = addDays(this.contextDate, 7);
      } }), h("div", { class: 'title' }, format(this.contextDate, 'MMMM d, yyyy'))), h("div", { class: 'header-right' }, h("goat-select", { size: 'sm', positions: 'bottom-left', value: this.view, items: this.availableViews.map((view) => {
        return {
          'label': view.label,
          'value': view.value,
        };
      }), "onGoat:change": (event) => {
        this.view = event.detail.value;
      } })));
  }
  render() {
    return (h(Host, null, h("div", { class: 'calendar' }, h("div", { class: 'calendar-header' }, this.renderHeader()), h("div", { class: 'calendar-body' }, h("div", { class: 'view-container' }, this.renderCalendarView()), h("div", { class: 'contextual-panel' })))));
  }
  get elm() { return this; }
  static get style() { return calendarCss; }
}, [1, "goat-calendar", {
    "events": [16],
    "availableViews": [8, "available-views"],
    "view": [1],
    "showLoader": [4, "show-loader"],
    "timezone": [8],
    "contextDate": [1032, "context-date"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["goat-calendar", "goat-button", "goat-calendar-column-view", "goat-calendar-column-view-background", "goat-empty-state", "goat-icon", "goat-menu", "goat-menu-item", "goat-select", "goat-spinner", "goat-svg", "goat-tag", "goat-text"];
  components.forEach(tagName => { switch (tagName) {
    case "goat-calendar":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Calendar);
      }
      break;
    case "goat-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$d();
      }
      break;
    case "goat-calendar-column-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "goat-calendar-column-view-background":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "goat-empty-state":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "goat-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "goat-menu":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "goat-menu-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "goat-select":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "goat-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "goat-svg":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "goat-tag":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "goat-text":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const GoatCalendar = Calendar;
const defineCustomElement = defineCustomElement$1;

export { GoatCalendar, defineCustomElement };

//# sourceMappingURL=goat-calendar.js.map