import { h, Host, } from '@stencil/core';
import { getComponentIndex } from '../../../utils/utils';
/**
 * @name Date Picker
 * @description Captures date input.
 * @example <goat-date-picker value='true'></goat-date-picker>
 */
export class DatePicker {
  constructor() {
    this.gid = getComponentIndex();
    this.inputHandler = (ev) => {
      const input = ev.target;
      const oldValue = this.value;
      if (input) {
        this.value = input.value;
      }
      this.goatInput.emit(ev);
      if (oldValue !== this.value) {
        this.goatChange.emit(ev);
      }
    };
    this.keyDownHandler = (ev) => {
      if (ev.key === 'Escape') {
        this.clearInput(ev);
      }
    };
    this.blurHandler = (ev) => {
      this.hasFocus = false;
      this.goatBlur.emit(ev);
    };
    this.focusHandler = (ev) => {
      this.hasFocus = true;
      this.goatFocus.emit(ev);
    };
    this.clearInput = (evt) => {
      this.nativeInput.value = '';
      this.inputHandler(evt);
    };
    this.name = `goat-input-${this.gid}`;
    this.placeholder = undefined;
    this.size = 'md';
    this.disabled = false;
    this.readonly = false;
    this.value = '';
    this.configAria = {};
    this.hasFocus = false;
  }
  hasValue() {
    return this.getValue().length > 0;
  }
  getValue() {
    return (this.value || '').toString();
  }
  async getComponentId() {
    return this.gid;
  }
  /**
   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus() {
    if (this.nativeInput) {
      this.nativeInput.focus();
      this.hasFocus = true;
    }
  }
  /**
   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global
   * `input.blur()`.
   */
  async setBlur() {
    if (this.nativeInput) {
      this.nativeInput.blur();
      this.hasFocus = false;
    }
  }
  componentWillLoad() {
    // If the ion-input has a tabindex attribute we get the value
    // and pass it down to the native input, then remove it from the
    // goat-input to avoid causing tabbing twice on the same element
    if (this.elm.hasAttribute('tabindex')) {
      const tabindex = this.elm.getAttribute('tabindex');
      this.tabindex = tabindex !== null ? tabindex : undefined;
      this.elm.removeAttribute('tabindex');
    }
    this.elm.getAttributeNames().forEach((name) => {
      if (name.includes('aria-')) {
        this.configAria[name] = this.elm.getAttribute(name);
        this.elm.removeAttribute(name);
      }
    });
  }
  render() {
    return (h(Host, { "has-focus": this.hasFocus, "has-value": this.hasValue() }, h("div", { class: {
        'input-container': true,
        'disabled': this.disabled,
        'has-focus': this.hasFocus,
      } }, h("input", { type: 'date', tabindex: this.tabindex, class: 'input input-native', disabled: this.disabled, readonly: this.readonly, onKeyDown: this.keyDownHandler, onInput: this.inputHandler, onBlur: this.blurHandler, onFocus: this.focusHandler }))));
  }
  static get is() { return "goat-date-picker"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["date-picker.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["date-picker.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The input field name."
        },
        "attribute": "name",
        "reflect": false,
        "defaultValue": "`goat-input-${this.gid}`"
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The input field placeholder."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'sm' | 'md' | 'lg'",
          "resolved": "\"lg\" | \"md\" | \"sm\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`."
        },
        "attribute": "size",
        "reflect": true,
        "defaultValue": "'md'"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If true, the user cannot interact with the button. Defaults to `false`."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If true, the user read the value cannot modify it. Defaults to `false`."
        },
        "attribute": "readonly",
        "reflect": true,
        "defaultValue": "false"
      },
      "value": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "string | number | null",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "The input field value."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      },
      "configAria": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "config-aria",
        "reflect": true,
        "defaultValue": "{}"
      }
    };
  }
  static get states() {
    return {
      "hasFocus": {}
    };
  }
  static get events() {
    return [{
        "method": "goatInput",
        "name": "goat:input",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when a keyboard input occurred."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "goatChange",
        "name": "goat:change",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the value has changed."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "goatBlur",
        "name": "goat:blur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input loses focus."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "goatFocus",
        "name": "goat:focus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input has focus."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "getComponentId": {
        "complexType": {
          "signature": "() => Promise<string>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<string>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setFocus": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "tags": []
        }
      },
      "setBlur": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "elm"; }
}
//# sourceMappingURL=date-picker.js.map
