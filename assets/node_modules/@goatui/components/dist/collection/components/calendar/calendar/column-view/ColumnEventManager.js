var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ColumnEventManager_events;
export default class ColumnEventManager {
  constructor() {
    _ColumnEventManager_events.set(this, []);
  }
  addEvents(events) {
    __classPrivateFieldSet(this, _ColumnEventManager_events, __classPrivateFieldGet(this, _ColumnEventManager_events, "f").concat(events), "f");
  }
  getEvents() {
    return __classPrivateFieldGet(this, _ColumnEventManager_events, "f");
  }
}
_ColumnEventManager_events = new WeakMap();
//# sourceMappingURL=ColumnEventManager.js.map
