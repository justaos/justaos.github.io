import { h } from '@stencil/core';
import { addDays, addHours, differenceInDays, endOfDay, format, isEqual, startOfDay } from 'date-fns';
import { calculateWeekRange } from '../utils';
import ColumnEventManager from './ColumnEventManager';
export class CalendarColumnView {
  constructor() {
    this.singleDayEvents = {};
    this.events = [];
    this.view = 'week';
    this.days = 7;
    this.currentTime = undefined;
    this.contextDate = undefined;
  }
  async componentWillLoad() {
    this.manager = new ColumnEventManager();
    this.manager.addEvents(this.events);
  }
  async componentDidLoad() {
    const viewBodyHeight = this.elm.shadowRoot.querySelector('.view-body').scrollHeight;
    this.elm.shadowRoot.querySelector('.view-body').scroll({ top: (this.getTimePercent(this.currentTime) / 100) * viewBodyHeight - 150 });
  }
  renderHeader() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate); differenceInDays(startOfDay(this.dateRange.endDate), i) >= 0; i = addDays(i, 1)) {
      const cls = ['column'];
      const diff = differenceInDays(startOfDay(i), startOfDay(this.currentTime));
      if (diff === 0)
        cls.push('today');
      else if (diff < 0)
        cls.push('past');
      else if (diff < 0)
        cls.push('future');
      columns.push(h("div", { class: cls.join(' ') }, h("div", { class: 'column-content' }, h("div", { class: 'date', onClick: () => {
          alert('date clicked');
        } }, format(i, 'dd')), h("div", { class: 'day' }, format(i, 'E')))));
    }
    return columns;
  }
  renderBackgroundColumns() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate); differenceInDays(startOfDay(this.dateRange.endDate), i) >= 0; i = addDays(i, 1)) {
      const cls = ['column'];
      if (isEqual(startOfDay(i), startOfDay(this.currentTime)))
        cls.push('active');
      columns.push(h("div", { class: cls.join(' ') }));
    }
    return columns;
  }
  renderBodyBackground() {
    const rows = [];
    for (let i = 0; i < 48; i++) { // @TODO: parameterize number of column, currently rendering 24 hours
      const cls = ['row'];
      if (i % 2)
        cls.push('hour');
      const row = h("div", { class: cls.join(' ') }, this.renderBackgroundColumns());
      rows.push(row);
    }
    return h("div", { class: 'background' }, rows);
  }
  renderScale() {
    const rows = [];
    for (let i = 0; i < 48; i++) { // @TODO: parameterize number of column, currently rendering 24 hours
      const cls = ['row'];
      if (i % 2)
        cls.push('hour');
      const startTime = startOfDay(new Date());
      const row = h("div", { class: cls.join(' ') }, (() => {
        if (i % 2 == 0 && i) {
          return h("div", { class: 'time' }, format(addHours(startTime, i / 2), 'hh a'));
        }
      })());
      rows.push(row);
    }
    return h("div", { class: 'background' }, rows);
  }
  renderEvents() {
    const columns = [];
    for (let i = new Date(this.dateRange.startDate), j = 0; differenceInDays(startOfDay(this.dateRange.endDate), i) >= 0; i = addDays(i, 1), j++) {
      const cls = ['column'];
      if (isEqual(startOfDay(i), startOfDay(this.currentTime)))
        cls.push('active');
      columns.push(h("div", { class: cls.join(' ') }, h("div", { class: 'column-content' }, (() => {
        /*if (this.eventDays[format(startOfDay(i), 'dd-MM-yyyy')]) {
          const eventDay = this.eventDays[format(startOfDay(i), 'dd-MM-yyyy')];
          const columnsLength = eventDay.length;
          return eventDay.map((nodes, columnIndex) => {
            return nodes.map((node) => {
              return <div class='event' style={{
                top: `${this.getTimePercent(node.event.start, startOfDay(i))}%`,
                height: `${this.getTimePercent(node.event.end, startOfDay(i)) - this.getTimePercent(node.event.start, startOfDay(i))}%`,
                left: `${columnIndex / columnsLength * 100}%`,
                width: `calc(${(1 * node.width) / columnsLength * 100}% - 1px)`,
              }}>
                <div class='event-title'>{node.event.title || '(no title)'}</div>
              </div>;
            });
          });
        }*/
      })())));
    }
    return h("div", { class: 'events-container' }, columns);
  }
  getDatePercent() {
    const currentDay = differenceInDays(startOfDay(this.currentTime), this.dateRange.startDate);
    return (currentDay / this.dateRange.totalDays) * 100;
  }
  getTimePercent(time, forDay) {
    if (!forDay)
      forDay = time;
    const startDate = startOfDay(forDay);
    const endDate = endOfDay(forDay);
    const percent = (time.valueOf() - startDate.valueOf()) / (endDate.valueOf() - startDate.valueOf()) * 100;
    if (percent < 0)
      return 0;
    if (percent > 100)
      return 100;
    return percent;
  }
  render() {
    if (this.view === 'week') {
      this.dateRange = calculateWeekRange(this.contextDate, 1);
    }
    else {
      this.dateRange.startDate = startOfDay(this.contextDate);
      this.dateRange.endDate = endOfDay(addDays(this.contextDate, this.days - 1));
      this.dateRange.totalDays = this.days;
    }
    return h("div", { class: 'calendar-column-view' }, h("div", { class: 'view-header' }, h("div", { class: 'scale' }), h("div", { class: 'columns' }, this.renderHeader()), h("div", { class: 'scrollbar-placeholder' })), h("div", { class: 'view-body' }, h("div", { class: 'view-body-scroll' }, h("div", { class: 'scale' }, this.renderScale()), h("div", { class: 'drawing-area' }, h("goat-calendar-column-view-background", { columns: this.dateRange.totalDays }), this.renderEvents()), (() => {
      if (this.currentTime.valueOf() > this.dateRange.startDate.valueOf() - 1 && this.currentTime.valueOf() < this.dateRange.endDate.valueOf() + 1) {
        return h("div", { class: 'current-time-line', style: { top: `calc(${this.getTimePercent(this.currentTime)}% - 1px)` } }, h("div", { class: 'time' }, format(this.contextDate, 'hh:mm a')), h("div", { class: 'dash-line', style: { width: `${this.getDatePercent()}%` } }), h("div", { class: 'dot', style: { 'left': `calc( ${this.getDatePercent()}% - 0.25rem)` } }), h("div", { class: 'line', style: {
            'left': `${this.getDatePercent()}%`,
            width: `${(1 / this.dateRange.totalDays) * 100}%`,
          } }));
      }
    })())));
  }
  static get is() { return "goat-calendar-column-view"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["column-view.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["column-view.css"]
    };
  }
  static get properties() {
    return {
      "events": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "any[]",
          "resolved": "any[]",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "defaultValue": "[]"
      },
      "view": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "view",
        "reflect": false,
        "defaultValue": "'week'"
      },
      "days": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "days",
        "reflect": false,
        "defaultValue": "7"
      },
      "currentTime": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Date",
          "resolved": "Date",
          "references": {
            "Date": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "contextDate": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Date",
          "resolved": "Date",
          "references": {
            "Date": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get elementRef() { return "elm"; }
}
//# sourceMappingURL=column-view.js.map
