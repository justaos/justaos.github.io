import { h, Host } from '@stencil/core';
import { loadPrism } from '../../../3d-party/prism';
var Language;
(function (Language) {
  Language["markup"] = "markup";
  Language["css"] = "css";
  Language["clike"] = "clike";
  Language["javascript"] = "javascript";
  Language["abap"] = "abap";
  Language["actionscript"] = "actionscript";
  Language["ada"] = "ada";
  Language["apacheconf"] = "apacheconf";
  Language["apl"] = "apl";
  Language["applescript"] = "applescript";
  Language["arduino"] = "arduino";
  Language["arff"] = "arff";
  Language["asciidoc"] = "asciidoc";
  Language["asm6502"] = "asm6502";
  Language["aspnet"] = "aspnet";
  Language["autohotkey"] = "autohotkey";
  Language["autoit"] = "autoit";
  Language["bash"] = "bash";
  Language["basic"] = "basic";
  Language["batch"] = "batch";
  Language["bison"] = "bison";
  Language["brainfuck"] = "brainfuck";
  Language["bro"] = "bro";
  Language["c"] = "c";
  Language["csharp"] = "csharp";
  Language["cpp"] = "cpp";
  Language["coffeescript"] = "coffeescript";
  Language["clojure"] = "clojure";
  Language["crystal"] = "crystal";
  Language["csp"] = "csp";
  Language["cssExtras"] = "css-extras";
  Language["d"] = "d";
  Language["dart"] = "dart";
  Language["diff"] = "diff";
  Language["django"] = "django";
  Language["docker"] = "docker";
  Language["eiffel"] = "eiffel";
  Language["elixir"] = "elixir";
  Language["elm"] = "elm";
  Language["erb"] = "erb";
  Language["erlang"] = "erlang";
  Language["fsharp"] = "fsharp";
  Language["flow"] = "flow";
  Language["fortran"] = "fortran";
  Language["gedcom"] = "gedcom";
  Language["gherkin"] = "gherkin";
  Language["git"] = "git";
  Language["glsl"] = "glsl";
  Language["go"] = "go";
  Language["graphql"] = "graphql";
  Language["groovy"] = "groovy";
  Language["haml"] = "haml";
  Language["handlebars"] = "handlebars";
  Language["haskell"] = "haskell";
  Language["haxe"] = "haxe";
  Language["http"] = "http";
  Language["hpkp"] = "hpkp";
  Language["hsts"] = "hsts";
  Language["ichigojam"] = "ichigojam";
  Language["icon"] = "icon";
  Language["inform7"] = "inform7";
  Language["ini"] = "ini";
  Language["io"] = "io";
  Language["j"] = "j";
  Language["java"] = "java";
  Language["jolie"] = "jolie";
  Language["json"] = "json";
  Language["jsx"] = "jsx";
  Language["julia"] = "julia";
  Language["keyman"] = "keyman";
  Language["kotlin"] = "kotlin";
  Language["latex"] = "latex";
  Language["less"] = "less";
  Language["lilypond"] = "lilypond";
  Language["liquid"] = "liquid";
  Language["lisp"] = "lisp";
  Language["livescript"] = "livescript";
  Language["lolcode"] = "lolcode";
  Language["lua"] = "lua";
  Language["makefile"] = "makefile";
  Language["markdown"] = "markdown";
  Language["markupTemplating"] = "markup-templating";
  Language["matlab"] = "matlab";
  Language["mel"] = "mel";
  Language["mizar"] = "mizar";
  Language["monkey"] = "monkey";
  Language["n4js"] = "n4js";
  Language["nasm"] = "nasm";
  Language["nginx"] = "nginx";
  Language["nim"] = "nim";
  Language["nix"] = "nix";
  Language["nsis"] = "nsis";
  Language["objectivec"] = "objectivec";
  Language["ocaml"] = "ocaml";
  Language["opencl"] = "opencl";
  Language["oz"] = "oz";
  Language["parigp"] = "parigp";
  Language["parser"] = "parser";
  Language["pascal"] = "pascal";
  Language["perl"] = "perl";
  Language["php"] = "php";
  Language["phpExtras"] = "php-extras";
  Language["plsql"] = "plsql";
  Language["powershell"] = "powershell";
  Language["processing"] = "processing";
  Language["prolog"] = "prolog";
  Language["properties"] = "properties";
  Language["protobuf"] = "protobuf";
  Language["pug"] = "pug";
  Language["puppet"] = "puppet";
  Language["pure"] = "pure";
  Language["python"] = "python";
  Language["q"] = "q";
  Language["qore"] = "qore";
  Language["r"] = "r";
})(Language || (Language = {}));
/**
 * @name Code Highlighter
 * @description A browser based code highlighter.
 * @img /assets/img/code-highlighter.png
 */
export class CodeHighlighter {
  constructor() {
    this.parsedValue = '';
    this.language = Language.javascript;
    this.lineNumbers = false;
    this.value = '';
    this.compiledCode = '';
  }
  languageWatcher() {
    this.renderPrism();
  }
  themeWatcher() {
    this.renderPrism();
  }
  async componentWillLoad() {
    if (!window['Prism']) {
      await loadPrism();
      // @ts-ignore
      const Prism = window['Prism'];
      const autoloader = Prism.plugins.autoloader;
      if (autoloader) {
        const all = [];
        for (const key in Language) {
          all.push(Language[key]);
        }
        autoloader.loadLanguages(all);
      }
    }
  }
  componentDidLoad() {
    setTimeout(() => this.renderPrism(), 1000);
  }
  decode(str) {
    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
  }
  renderPrism() {
    // @ts-ignore
    const Prism = window['Prism'];
    let value = this.value;
    if (!value) {
      value = this.elm.innerHTML;
    }
    value = this.decode(value);
    this.parsedValue = value.trim();
    const formatted = Prism.highlight(this.parsedValue, Prism.languages[this.language], this.language);
    let lineNumbersWrapper = '';
    if (this.lineNumbers) {
      const linesNum = formatted.split('\n').length;
      const lines = new Array(linesNum + 1).join('<span></span>');
      lineNumbersWrapper = `<span aria-hidden='true' class='line-numbers-rows'>${lines}</span>`;
    }
    this.compiledCode = formatted + lineNumbersWrapper;
  }
  handleCopyClick() {
    window.navigator.clipboard.writeText(this.parsedValue);
    alert('copied');
  }
  render() {
    return (h(Host, null, this.compiledCode && h("div", { class: 'code-highlighter' }, h("div", { class: 'scroll-wrapper' }, h("div", { class: { 'line-numbers-wrapper': true, 'line-numbers': this.lineNumbers } }, h("pre", { dir: 'ltr', class: 'highlighter line-numbers', innerHTML: this.compiledCode }))), h("goat-button", { class: 'copy-btn color-secondary icon-only', size: 'sm', variant: 'ghost', "aria-label": 'Copy code', title: 'Copy code', "onGoat:click": () => {
        this.handleCopyClick();
      } }, h("goat-icon", { name: 'files', size: '1rem' }))), !this.compiledCode && h("div", { class: 'code-loader' }, h("goat-spinner", { class: 'rainbow' }), "Loading code...")));
  }
  static get is() { return "goat-code-highlighter"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["code-highlighter.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["code-highlighter.css"]
    };
  }
  static get properties() {
    return {
      "language": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "language",
        "reflect": false,
        "defaultValue": "Language.javascript"
      },
      "lineNumbers": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "line-numbers",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      }
    };
  }
  static get states() {
    return {
      "compiledCode": {}
    };
  }
  static get elementRef() { return "elm"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "languageWatcher"
      }, {
        "propName": "lineNumbers",
        "methodName": "themeWatcher"
      }];
  }
}
//# sourceMappingURL=code-highlighter.js.map
