{"version":3,"file":"flow-designer.js","sourceRoot":"","sources":["../../../../src/components/flow-designer/flow-designer/flow-designer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Listen, Prop, State } from '@stencil/core';\r\nimport { loadScript } from '../../../utils/utils';\r\n\r\n\r\nfunction PX(unit: number) {\r\n  return unit * 16;\r\n}\r\n\r\n/**\r\n * @name Flow Designer\r\n * @description An interactive button with a range of presentation options.\r\n * @example <goat-flow-designer>\r\n *   </goat-flow-designer>\r\n */\r\n@Component({\r\n  tag: 'goat-flow-designer',\r\n  styleUrl: 'flow-designer.scss',\r\n  shadow: true,\r\n})\r\nexport class FlowDesigner {\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop() blockSize: number = 10;\r\n\r\n  @Prop() activities: any[] = [];\r\n\r\n  @Prop() disabled: boolean = false;\r\n\r\n  private isMouseDown: boolean = false;\r\n  private startX: number;\r\n  private startY: number;\r\n  private scrollLeft: number;\r\n  private scrollTop: number;\r\n\r\n  private nativeScrollElm?: HTMLElement;\r\n  private canvasElm?: HTMLElement;\r\n\r\n  @State() activityHeight: number = 10;\r\n  @State() activityWidth: number = 5;\r\n  @State() lines: any[] = [];\r\n\r\n  @Listen('mouseup', { passive: false })\r\n  handleMouseDown() {\r\n    this.isMouseDown = false;\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    if (!window['SVG']) {\r\n      await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/svg.js/3.1.2/svg.min.js`);\r\n    }\r\n    this.lines = [{\r\n      start: { x: 0, y: 0, gap: 8, direction: 'down' },\r\n      end: { x: -15, y: 15, direction: 'top' },\r\n      type: 'shape_connector',\r\n    }, {\r\n      start: { x: 0, y: 0, gap: 8, direction: 'down' },\r\n      end: { x: 15, y: 15, direction: 'top' },\r\n      type: 'shape_connector',\r\n    }];\r\n  }\r\n\r\n  componentDidLoad() {\r\n\r\n    setTimeout(() => {\r\n      this.nativeScrollElm.scrollLeft = (this.canvasElm.clientWidth - this.nativeScrollElm.clientWidth) / 2;\r\n      this.initializeCanvas();\r\n    }, 100);\r\n  }\r\n\r\n  getViewBoxHeight() {\r\n    return PX(this.blockSize * this.activityHeight);\r\n  }\r\n\r\n  getViewBoxWidth() {\r\n    return PX(this.blockSize * this.activityWidth);\r\n  }\r\n\r\n  initializeCanvas() {\r\n    //  const draw = (window['SVG']()).addTo(this.canvasElm).viewbox(0, 0, this.getViewBoxWidth(), this.getViewBoxHeight());\r\n\r\n    // this.createActivityNode(1, 1).addTo(draw);\r\n\r\n  }\r\n\r\n  createStartNode() {\r\n    const radius = PX(this.blockSize / 2);\r\n\r\n    return (new window['SVG'].Circle())\r\n      .radius(radius).move(0, 0)\r\n      .attr({ fill: 'var(--color-success-100)' })\r\n      .stroke({ color: 'var(--color-success-500)' });\r\n  }\r\n\r\n  createActivityNode(x, y) {\r\n    const size = PX(this.blockSize / 2);\r\n\r\n    /* var image = new window['SVG'].Image().load('https://cdn.img42.com/4b6f5e63ac50c95fe147052d8a4db676.jpeg');\r\n     image.size(100, 100).move(20, 20);*/\r\n\r\n    const centerOfRect = (size / 2);\r\n    return (new window['SVG'].Rect())\r\n      .addClass('activity')\r\n      .size(size, size)\r\n      .radius(15)\r\n      .move((((this.activityWidth - 1) / 2 + x) * PX(this.blockSize)) + centerOfRect, ((y) * PX(this.blockSize)) + centerOfRect);\r\n  }\r\n\r\n  render() {\r\n    return <Host disabled={this.disabled}>\r\n      <div class='flow-designer' ref={elm => this.nativeScrollElm = elm}>\r\n        <div class='canvas-wrapper'\r\n             onMouseDown={(event) => {\r\n               event.preventDefault();\r\n               this.isMouseDown = true;\r\n               this.startX = event.pageX - this.nativeScrollElm.offsetLeft;\r\n               this.startY = event.pageY - this.nativeScrollElm.offsetTop;\r\n               this.scrollLeft = this.nativeScrollElm.scrollLeft;\r\n               this.scrollTop = this.nativeScrollElm.scrollTop;\r\n             }}\r\n             onMouseLeave={(event) => {\r\n               event.preventDefault();\r\n               this.isMouseDown = false;\r\n             }}\r\n             onMouseMove={(event) => {\r\n               event.preventDefault();\r\n               if (!this.isMouseDown) return;\r\n               const x = event.pageX - this.nativeScrollElm.offsetLeft;\r\n               const walkX = (x - this.startX); //scroll-fast\r\n               this.nativeScrollElm.scrollLeft = this.scrollLeft - walkX;\r\n               const y = event.pageY - this.nativeScrollElm.offsetTop;\r\n               const walkY = (y - this.startY); //scroll-fast\r\n               this.nativeScrollElm.scrollTop = this.scrollTop - walkY;\r\n             }}>\r\n\r\n          <goat-canvas ref={elm => this.canvasElm = elm} class='flow-lines' lines={this.lines} padding={0}\r\n                       viewbox={`0 0 124 134`} />\r\n\r\n          <div class='flow-items'\r\n               style={{ 'width': `${this.getViewBoxWidth()}px`, 'height': `${this.getViewBoxHeight()}px` }} />\r\n        </div>\r\n      </div>\r\n    </Host>;\r\n  }\r\n\r\n\r\n  /* renderCanvas() {\r\n     console.log(this.canvasElm);\r\n     const draw = (window['SVG']())\r\n       .addTo(this.canvasElm);\r\n\r\n     const panel = {\r\n       minX: 0,\r\n       minY: 0,\r\n       maxX: 0,\r\n       maxY: 0,\r\n     };\r\n\r\n     for (const line of this.lines) {\r\n       this.drawLine(draw, line, panel);\r\n     }\r\n\r\n     panel.minX -= 1;\r\n     panel.minY -= 1;\r\n     panel.maxX += 1;\r\n     panel.maxY += 1;\r\n\r\n     this.width = (panel.maxX - panel.minX);\r\n     this.height = (panel.maxY - panel.minY);\r\n\r\n     draw.viewbox(panel.minX * this.unitSize, panel.minY * this.unitSize, this.width * this.unitSize, this.height * this.unitSize);\r\n   }\r\n\r\n\r\n   drawLine(draw, line, panel) {\r\n\r\n     let pathString = `M${(line.start.x) * this.unitSize} ${(line.start.y) * this.unitSize}`;\r\n     this.updatePanel(panel, line.start);\r\n\r\n     const currentPosition = { x: line.start.x, y: line.start.y };\r\n     for (let i = 0; i < line.path.length; i++) {\r\n       const step = line.path[i];\r\n       const nextStep = line.path[i + 1];\r\n       if (step.move === 'down' || step.move === 'up') {\r\n         if (step.move === 'down') {\r\n           currentPosition.y += step.size * this.stepSize;\r\n         } else if (step.move === 'up') {\r\n           currentPosition.y += -1 * step.size * this.stepSize;\r\n         }\r\n\r\n         if (nextStep && (nextStep.move === 'left' || nextStep.move === 'right')) {\r\n\r\n           if (step.move == 'down' && nextStep.move === 'right') {\r\n             currentPosition.x += -1 * step.size * this.stepSize;\r\n           } else if (nextStep.move === 'right') {\r\n             currentPosition.x += step.size * this.stepSize;\r\n           }\r\n           pathString +=\r\n\r\n           /!* draw.path('M0 16 Q 0 48 32 48')\r\n              .fill('none')\r\n              .stroke({ color: '#f06', width: 4, linecap: 'round', linejoin: 'round' }); *!/\r\n\r\n         } else {\r\n           pathString += ` V ${currentPosition.y * this.unitSize}`;\r\n         }\r\n       } else if (step.move === 'right' || step.move === 'left') {\r\n         if (step.move === 'left') {\r\n           currentPosition.x += -1 * step.size * this.stepSize;\r\n         } else if (step.move === 'right') {\r\n           currentPosition.x += step.size * this.stepSize;\r\n         }\r\n\r\n         if (nextStep && (nextStep.move === 'up' || nextStep.move === 'down')) {\r\n\r\n         } else {\r\n           pathString += ` H ${currentPosition.x * this.unitSize}`;\r\n         }\r\n       }\r\n       this.updatePanel(panel, currentPosition);\r\n     }\r\n\r\n     const path = draw.path(pathString)\r\n       .addClass('line')\r\n       .addClass('clickable')\r\n       .fill('none')\r\n       .stroke({ width: 4, linecap: 'round', linejoin: 'round' });\r\n\r\n     path.node.onclick = () => {\r\n       alert('click');\r\n     };\r\n   }\r\n\r\n   updatePanel(panel, position) {\r\n     if (position.x > panel.maxX) {\r\n       panel.maxX = position.x;\r\n     }\r\n     if (position.y > panel.maxY) {\r\n       panel.maxY = position.y;\r\n     }\r\n     if (position.x < panel.minX) {\r\n       panel.minX = position.x;\r\n     }\r\n     if (position.y < panel.minY) {\r\n       panel.minY = position.y;\r\n     }\r\n   }*/\r\n\r\n}\r\n"]}